(()=>{var ri=Math.PI/180;function ii(){return typeof window<"u"&&({}.toString.call(window)==="[object Window]"||{}.toString.call(window)==="[object global]")}var Et=typeof global<"u"?global:typeof window<"u"?window:typeof WorkerGlobalScope<"u"?self:{},E={_global:Et,version:"8.3.10",isBrowser:ii(),isUnminified:/param/.test(function(n){}.toString()),dblClickWindow:400,getAngle(n){return E.angleDeg?n*ri:n},enableTrace:!1,pointerEventsEnabled:!0,autoDrawEnabled:!0,hitOnDragEnabled:!1,capturePointerEventsEnabled:!1,_mouseListenClick:!1,_touchListenClick:!1,_pointerListenClick:!1,_mouseInDblClickWindow:!1,_touchInDblClickWindow:!1,_pointerInDblClickWindow:!1,_mouseDblClickPointerId:null,_touchDblClickPointerId:null,_pointerDblClickPointerId:null,pixelRatio:typeof window<"u"&&window.devicePixelRatio||1,dragDistance:3,angleDeg:!0,showWarnings:!0,dragButtons:[0,1],isDragging(){return E.DD.isDragging},isDragReady(){return!!E.DD.node},document:Et.document,_injectGlobal(n){Et.Konva=n}},N=n=>{E[n.prototype.getClassName()]=n};E._injectGlobal(E);var j=class{constructor(t=[1,0,0,1,0,0]){this.dirty=!1,this.m=t&&t.slice()||[1,0,0,1,0,0]}reset(){this.m[0]=1,this.m[1]=0,this.m[2]=0,this.m[3]=1,this.m[4]=0,this.m[5]=0}copy(){return new j(this.m)}copyInto(t){t.m[0]=this.m[0],t.m[1]=this.m[1],t.m[2]=this.m[2],t.m[3]=this.m[3],t.m[4]=this.m[4],t.m[5]=this.m[5]}point(t){var e=this.m;return{x:e[0]*t.x+e[2]*t.y+e[4],y:e[1]*t.x+e[3]*t.y+e[5]}}translate(t,e){return this.m[4]+=this.m[0]*t+this.m[2]*e,this.m[5]+=this.m[1]*t+this.m[3]*e,this}scale(t,e){return this.m[0]*=t,this.m[1]*=t,this.m[2]*=e,this.m[3]*=e,this}rotate(t){var e=Math.cos(t),r=Math.sin(t),i=this.m[0]*e+this.m[2]*r,a=this.m[1]*e+this.m[3]*r,s=this.m[0]*-r+this.m[2]*e,o=this.m[1]*-r+this.m[3]*e;return this.m[0]=i,this.m[1]=a,this.m[2]=s,this.m[3]=o,this}getTranslation(){return{x:this.m[4],y:this.m[5]}}skew(t,e){var r=this.m[0]+this.m[2]*e,i=this.m[1]+this.m[3]*e,a=this.m[2]+this.m[0]*t,s=this.m[3]+this.m[1]*t;return this.m[0]=r,this.m[1]=i,this.m[2]=a,this.m[3]=s,this}multiply(t){var e=this.m[0]*t.m[0]+this.m[2]*t.m[1],r=this.m[1]*t.m[0]+this.m[3]*t.m[1],i=this.m[0]*t.m[2]+this.m[2]*t.m[3],a=this.m[1]*t.m[2]+this.m[3]*t.m[3],s=this.m[0]*t.m[4]+this.m[2]*t.m[5]+this.m[4],o=this.m[1]*t.m[4]+this.m[3]*t.m[5]+this.m[5];return this.m[0]=e,this.m[1]=r,this.m[2]=i,this.m[3]=a,this.m[4]=s,this.m[5]=o,this}invert(){var t=1/(this.m[0]*this.m[3]-this.m[1]*this.m[2]),e=this.m[3]*t,r=-this.m[1]*t,i=-this.m[2]*t,a=this.m[0]*t,s=t*(this.m[2]*this.m[5]-this.m[3]*this.m[4]),o=t*(this.m[1]*this.m[4]-this.m[0]*this.m[5]);return this.m[0]=e,this.m[1]=r,this.m[2]=i,this.m[3]=a,this.m[4]=s,this.m[5]=o,this}getMatrix(){return this.m}decompose(){var t=this.m[0],e=this.m[1],r=this.m[2],i=this.m[3],a=this.m[4],s=this.m[5],o=t*i-e*r;let h={x:a,y:s,rotation:0,scaleX:0,scaleY:0,skewX:0,skewY:0};if(t!=0||e!=0){var l=Math.sqrt(t*t+e*e);h.rotation=e>0?Math.acos(t/l):-Math.acos(t/l),h.scaleX=l,h.scaleY=o/l,h.skewX=(t*r+e*i)/o,h.skewY=0}else if(r!=0||i!=0){var d=Math.sqrt(r*r+i*i);h.rotation=Math.PI/2-(i>0?Math.acos(-r/d):-Math.acos(r/d)),h.scaleX=o/d,h.scaleY=d,h.skewX=0,h.skewY=(t*r+e*i)/o}return h.rotation=m._getRotation(h.rotation),h}},ai="[object Array]",ni="[object Number]",si="[object String]",oi="[object Boolean]",hi=Math.PI/180,li=180/Math.PI,Se="#",di="",fi="0",ui="Konva warning: ",He="Konva error: ",ci="rgb(",ye={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,132,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,255,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,203],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[119,128,144],slategrey:[119,128,144],snow:[255,255,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],transparent:[255,255,255,0],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,5]},gi=/rgb\((\d{1,3}),(\d{1,3}),(\d{1,3})\)/,Qt=[],pi=typeof requestAnimationFrame<"u"&&requestAnimationFrame||function(n){setTimeout(n,60)},m={_isElement(n){return!!(n&&n.nodeType==1)},_isFunction(n){return!!(n&&n.constructor&&n.call&&n.apply)},_isPlainObject(n){return!!n&&n.constructor===Object},_isArray(n){return Object.prototype.toString.call(n)===ai},_isNumber(n){return Object.prototype.toString.call(n)===ni&&!isNaN(n)&&isFinite(n)},_isString(n){return Object.prototype.toString.call(n)===si},_isBoolean(n){return Object.prototype.toString.call(n)===oi},isObject(n){return n instanceof Object},isValidSelector(n){if(typeof n!="string")return!1;var t=n[0];return t==="#"||t==="."||t===t.toUpperCase()},_sign(n){return n===0||n>0?1:-1},requestAnimFrame(n){Qt.push(n),Qt.length===1&&pi(function(){let t=Qt;Qt=[],t.forEach(function(e){e()})})},createCanvasElement(){var n=document.createElement("canvas");try{n.style=n.style||{}}catch(t){}return n},createImageElement(){return document.createElement("img")},_isInDocument(n){for(;n=n.parentNode;)if(n==document)return!0;return!1},_urlToImage(n,t){var e=m.createImageElement();e.onload=function(){t(e)},e.src=n},_rgbToHex(n,t,e){return((1<<24)+(n<<16)+(t<<8)+e).toString(16).slice(1)},_hexToRgb(n){n=n.replace(Se,di);var t=parseInt(n,16);return{r:t>>16&255,g:t>>8&255,b:t&255}},getRandomColor(){for(var n=(Math.random()*16777215<<0).toString(16);n.length<6;)n=fi+n;return Se+n},getRGB(n){var t;return n in ye?(t=ye[n],{r:t[0],g:t[1],b:t[2]}):n[0]===Se?this._hexToRgb(n.substring(1)):n.substr(0,4)===ci?(t=gi.exec(n.replace(/ /g,"")),{r:parseInt(t[1],10),g:parseInt(t[2],10),b:parseInt(t[3],10)}):{r:0,g:0,b:0}},colorToRGBA(n){return n=n||"black",m._namedColorToRBA(n)||m._hex3ColorToRGBA(n)||m._hex6ColorToRGBA(n)||m._rgbColorToRGBA(n)||m._rgbaColorToRGBA(n)||m._hslColorToRGBA(n)},_namedColorToRBA(n){var t=ye[n.toLowerCase()];return t?{r:t[0],g:t[1],b:t[2],a:1}:null},_rgbColorToRGBA(n){if(n.indexOf("rgb(")===0){n=n.match(/rgb\(([^)]+)\)/)[1];var t=n.split(/ *, */).map(Number);return{r:t[0],g:t[1],b:t[2],a:1}}},_rgbaColorToRGBA(n){if(n.indexOf("rgba(")===0){n=n.match(/rgba\(([^)]+)\)/)[1];var t=n.split(/ *, */).map((e,r)=>e.slice(-1)==="%"?r===3?parseInt(e)/100:parseInt(e)/100*255:Number(e));return{r:t[0],g:t[1],b:t[2],a:t[3]}}},_hex6ColorToRGBA(n){if(n[0]==="#"&&n.length===7)return{r:parseInt(n.slice(1,3),16),g:parseInt(n.slice(3,5),16),b:parseInt(n.slice(5,7),16),a:1}},_hex3ColorToRGBA(n){if(n[0]==="#"&&n.length===4)return{r:parseInt(n[1]+n[1],16),g:parseInt(n[2]+n[2],16),b:parseInt(n[3]+n[3],16),a:1}},_hslColorToRGBA(n){if(/hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.test(n)){let[t,...e]=/hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(n),r=Number(e[0])/360,i=Number(e[1])/100,a=Number(e[2])/100,s,o,h;if(i===0)return h=a*255,{r:Math.round(h),g:Math.round(h),b:Math.round(h),a:1};a<.5?s=a*(1+i):s=a+i-a*i;let l=2*a-s,d=[0,0,0];for(let g=0;g<3;g++)o=r+1/3*-(g-1),o<0&&o++,o>1&&o--,6*o<1?h=l+(s-l)*6*o:2*o<1?h=s:3*o<2?h=l+(s-l)*(2/3-o)*6:h=l,d[g]=h*255;return{r:Math.round(d[0]),g:Math.round(d[1]),b:Math.round(d[2]),a:1}}},haveIntersection(n,t){return!(t.x>n.x+n.width||t.x+t.width<n.x||t.y>n.y+n.height||t.y+t.height<n.y)},cloneObject(n){var t={};for(var e in n)this._isPlainObject(n[e])?t[e]=this.cloneObject(n[e]):this._isArray(n[e])?t[e]=this.cloneArray(n[e]):t[e]=n[e];return t},cloneArray(n){return n.slice(0)},degToRad(n){return n*hi},radToDeg(n){return n*li},_degToRad(n){return m.warn("Util._degToRad is removed. Please use public Util.degToRad instead."),m.degToRad(n)},_radToDeg(n){return m.warn("Util._radToDeg is removed. Please use public Util.radToDeg instead."),m.radToDeg(n)},_getRotation(n){return E.angleDeg?m.radToDeg(n):n},_capitalize(n){return n.charAt(0).toUpperCase()+n.slice(1)},throw(n){throw new Error(He+n)},error(n){console.error(He+n)},warn(n){!E.showWarnings||console.warn(ui+n)},each(n,t){for(var e in n)t(e,n[e])},_inRange(n,t,e){return t<=n&&n<e},_getProjectionToSegment(n,t,e,r,i,a){var s,o,h,l=(n-e)*(n-e)+(t-r)*(t-r);if(l==0)s=n,o=t,h=(i-e)*(i-e)+(a-r)*(a-r);else{var d=((i-n)*(e-n)+(a-t)*(r-t))/l;d<0?(s=n,o=t,h=(n-i)*(n-i)+(t-a)*(t-a)):d>1?(s=e,o=r,h=(e-i)*(e-i)+(r-a)*(r-a)):(s=n+d*(e-n),o=t+d*(r-t),h=(s-i)*(s-i)+(o-a)*(o-a))}return[s,o,h]},_getProjectionToLine(n,t,e){var r=m.cloneObject(n),i=Number.MAX_VALUE;return t.forEach(function(a,s){if(!(!e&&s===t.length-1)){var o=t[(s+1)%t.length],h=m._getProjectionToSegment(a.x,a.y,o.x,o.y,n.x,n.y),l=h[0],d=h[1],g=h[2];g<i&&(r.x=l,r.y=d,i=g)}}),r},_prepareArrayForTween(n,t,e){var r,i=[],a=[];if(n.length>t.length){var s=t;t=n,n=s}for(r=0;r<n.length;r+=2)i.push({x:n[r],y:n[r+1]});for(r=0;r<t.length;r+=2)a.push({x:t[r],y:t[r+1]});var o=[];return a.forEach(function(h){var l=m._getProjectionToLine(h,i,e);o.push(l.x),o.push(l.y)}),o},_prepareToStringify(n){var t;n.visitedByCircularReferenceRemoval=!0;for(var e in n)if(!!(n.hasOwnProperty(e)&&n[e]&&typeof n[e]=="object")){if(t=Object.getOwnPropertyDescriptor(n,e),n[e].visitedByCircularReferenceRemoval||m._isElement(n[e]))if(t.configurable)delete n[e];else return null;else if(m._prepareToStringify(n[e])===null)if(t.configurable)delete n[e];else return null}return delete n.visitedByCircularReferenceRemoval,n},_assign(n,t){for(var e in t)n[e]=t[e];return n},_getFirstPointerId(n){return n.touches?n.changedTouches[0].identifier:n.pointerId||999}};function xt(n){return m._isString(n)?'"'+n+'"':Object.prototype.toString.call(n)==="[object Number]"||m._isBoolean(n)?n:Object.prototype.toString.call(n)}function Jt(n){return n>255?255:n<0?0:Math.round(n)}function S(){if(E.isUnminified)return function(n,t){return m._isNumber(n)||m.warn(xt(n)+' is a not valid value for "'+t+'" attribute. The value should be a number.'),n}}function Zt(n){if(E.isUnminified)return function(t,e){let r=m._isNumber(t),i=m._isArray(t)&&t.length==n;return!r&&!i&&m.warn(xt(t)+' is a not valid value for "'+e+'" attribute. The value should be a number or Array<number>('+n+")"),t}}function It(){if(E.isUnminified)return function(n,t){var e=m._isNumber(n),r=n==="auto";return e||r||m.warn(xt(n)+' is a not valid value for "'+t+'" attribute. The value should be a number or "auto".'),n}}function vt(){if(E.isUnminified)return function(n,t){return m._isString(n)||m.warn(xt(n)+' is a not valid value for "'+t+'" attribute. The value should be a string.'),n}}function be(){if(E.isUnminified)return function(n,t){let e=m._isString(n),r=Object.prototype.toString.call(n)==="[object CanvasGradient]"||n&&n.addColorStop;return e||r||m.warn(xt(n)+' is a not valid value for "'+t+'" attribute. The value should be a string or a native gradient.'),n}}function ze(){if(E.isUnminified)return function(n,t){return m._isArray(n)?n.forEach(function(e){m._isNumber(e)||m.warn('"'+t+'" attribute has non numeric element '+e+". Make sure that all elements are numbers.")}):m.warn(xt(n)+' is a not valid value for "'+t+'" attribute. The value should be a array of numbers.'),n}}function J(){if(E.isUnminified)return function(n,t){var e=n===!0||n===!1;return e||m.warn(xt(n)+' is a not valid value for "'+t+'" attribute. The value should be a boolean.'),n}}function We(n){if(E.isUnminified)return function(t,e){return m.isObject(t)||m.warn(xt(t)+' is a not valid value for "'+e+'" attribute. The value should be an object with properties '+n),t}}var Ft="get",Bt="set",f={addGetterSetter(n,t,e,r,i){f.addGetter(n,t,e),f.addSetter(n,t,r,i),f.addOverloadedGetterSetter(n,t)},addGetter(n,t,e){var r=Ft+m._capitalize(t);n.prototype[r]=n.prototype[r]||function(){var i=this.attrs[t];return i===void 0?e:i}},addSetter(n,t,e,r){var i=Bt+m._capitalize(t);n.prototype[i]||f.overWriteSetter(n,t,e,r)},overWriteSetter(n,t,e,r){var i=Bt+m._capitalize(t);n.prototype[i]=function(a){return e&&a!==void 0&&a!==null&&(a=e.call(this,a,t)),this._setAttr(t,a),r&&r.call(this),this}},addComponentsGetterSetter(n,t,e,r,i){var a=e.length,s=m._capitalize,o=Ft+s(t),h=Bt+s(t),l,d;n.prototype[o]=function(){var c={};for(l=0;l<a;l++)d=e[l],c[d]=this.getAttr(t+s(d));return c};var g=We(e);n.prototype[h]=function(c){var p=this.attrs[t],u;r&&(c=r.call(this,c)),g&&g.call(this,c,t);for(u in c)!c.hasOwnProperty(u)||this._setAttr(t+s(u),c[u]);return this._fireChangeEvent(t,p,c),i&&i.call(this),this},f.addOverloadedGetterSetter(n,t)},addOverloadedGetterSetter(n,t){var e=m._capitalize(t),r=Bt+e,i=Ft+e;n.prototype[t]=function(){return arguments.length?(this[r](arguments[0]),this):this[i]()}},addDeprecatedGetterSetter(n,t,e,r){m.error("Adding deprecated "+t);var i=Ft+m._capitalize(t),a=t+" property is deprecated and will be removed soon. Look at Konva change log for more information.";n.prototype[i]=function(){m.error(a);var s=this.attrs[t];return s===void 0?e:s},f.addSetter(n,t,r,function(){m.error(a)}),f.addOverloadedGetterSetter(n,t)},backCompat(n,t){m.each(t,function(e,r){var i=n.prototype[r],a=Ft+m._capitalize(e),s=Bt+m._capitalize(e);function o(){i.apply(this,arguments),m.error('"'+e+'" method is deprecated and will be removed soon. Use ""'+r+'" instead.')}n.prototype[e]=o,n.prototype[a]=o,n.prototype[s]=o})},afterSetFilter(){this._filterUpToDate=!1}};function mi(n){var t=[],e=n.length,r=m,i,a;for(i=0;i<e;i++)a=n[i],r._isNumber(a)?a=Math.round(a*1e3)/1e3:r._isString(a)||(a=a+""),t.push(a);return t}var Ue=",",vi="(",_i=")",Si="([",yi="])",bi=";",Ci="()",xi="=",Ye=["arc","arcTo","beginPath","bezierCurveTo","clearRect","clip","closePath","createLinearGradient","createPattern","createRadialGradient","drawImage","ellipse","fill","fillText","getImageData","createImageData","lineTo","moveTo","putImageData","quadraticCurveTo","rect","restore","rotate","save","scale","setLineDash","setTransform","stroke","strokeText","transform","translate"],wi=["fillStyle","strokeStyle","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","lineCap","lineDashOffset","lineJoin","lineWidth","miterLimit","font","textAlign","textBaseline","globalAlpha","globalCompositeOperation","imageSmoothingEnabled"],Pi=100,kt=class{constructor(t){this.canvas=t,this._context=t._canvas.getContext("2d"),E.enableTrace&&(this.traceArr=[],this._enableTrace())}fillShape(t){t.fillEnabled()&&this._fill(t)}_fill(t){}strokeShape(t){t.hasStroke()&&this._stroke(t)}_stroke(t){}fillStrokeShape(t){t.attrs.fillAfterStrokeEnabled?(this.strokeShape(t),this.fillShape(t)):(this.fillShape(t),this.strokeShape(t))}getTrace(t,e){var r=this.traceArr,i=r.length,a="",s,o,h,l;for(s=0;s<i;s++)o=r[s],h=o.method,h?(l=o.args,a+=h,t?a+=Ci:m._isArray(l[0])?a+=Si+l.join(Ue)+yi:(e&&(l=l.map(d=>typeof d=="number"?Math.floor(d):d)),a+=vi+l.join(Ue)+_i)):(a+=o.property,t||(a+=xi+o.val)),a+=bi;return a}clearTrace(){this.traceArr=[]}_trace(t){var e=this.traceArr,r;e.push(t),r=e.length,r>=Pi&&e.shift()}reset(){var t=this.getCanvas().getPixelRatio();this.setTransform(1*t,0,0,1*t,0,0)}getCanvas(){return this.canvas}clear(t){var e=this.getCanvas();t?this.clearRect(t.x||0,t.y||0,t.width||0,t.height||0):this.clearRect(0,0,e.getWidth()/e.pixelRatio,e.getHeight()/e.pixelRatio)}_applyLineCap(t){var e=t.getLineCap();e&&this.setAttr("lineCap",e)}_applyOpacity(t){var e=t.getAbsoluteOpacity();e!==1&&this.setAttr("globalAlpha",e)}_applyLineJoin(t){var e=t.attrs.lineJoin;e&&this.setAttr("lineJoin",e)}setAttr(t,e){this._context[t]=e}arc(t,e,r,i,a,s){this._context.arc(t,e,r,i,a,s)}arcTo(t,e,r,i,a){this._context.arcTo(t,e,r,i,a)}beginPath(){this._context.beginPath()}bezierCurveTo(t,e,r,i,a,s){this._context.bezierCurveTo(t,e,r,i,a,s)}clearRect(t,e,r,i){this._context.clearRect(t,e,r,i)}clip(){this._context.clip()}closePath(){this._context.closePath()}createImageData(t,e){var r=arguments;if(r.length===2)return this._context.createImageData(t,e);if(r.length===1)return this._context.createImageData(t)}createLinearGradient(t,e,r,i){return this._context.createLinearGradient(t,e,r,i)}createPattern(t,e){return this._context.createPattern(t,e)}createRadialGradient(t,e,r,i,a,s){return this._context.createRadialGradient(t,e,r,i,a,s)}drawImage(t,e,r,i,a,s,o,h,l){var d=arguments,g=this._context;d.length===3?g.drawImage(t,e,r):d.length===5?g.drawImage(t,e,r,i,a):d.length===9&&g.drawImage(t,e,r,i,a,s,o,h,l)}ellipse(t,e,r,i,a,s,o,h){this._context.ellipse(t,e,r,i,a,s,o,h)}isPointInPath(t,e){return this._context.isPointInPath(t,e)}fill(t){t?this._context.fill(t):this._context.fill()}fillRect(t,e,r,i){this._context.fillRect(t,e,r,i)}strokeRect(t,e,r,i){this._context.strokeRect(t,e,r,i)}fillText(t,e,r,i){i?this._context.fillText(t,e,r,i):this._context.fillText(t,e,r)}measureText(t){return this._context.measureText(t)}getImageData(t,e,r,i){return this._context.getImageData(t,e,r,i)}lineTo(t,e){this._context.lineTo(t,e)}moveTo(t,e){this._context.moveTo(t,e)}rect(t,e,r,i){this._context.rect(t,e,r,i)}putImageData(t,e,r){this._context.putImageData(t,e,r)}quadraticCurveTo(t,e,r,i){this._context.quadraticCurveTo(t,e,r,i)}restore(){this._context.restore()}rotate(t){this._context.rotate(t)}save(){this._context.save()}scale(t,e){this._context.scale(t,e)}setLineDash(t){this._context.setLineDash?this._context.setLineDash(t):"mozDash"in this._context?this._context.mozDash=t:"webkitLineDash"in this._context&&(this._context.webkitLineDash=t)}getLineDash(){return this._context.getLineDash()}setTransform(t,e,r,i,a,s){this._context.setTransform(t,e,r,i,a,s)}stroke(t){t?this._context.stroke(t):this._context.stroke()}strokeText(t,e,r,i){this._context.strokeText(t,e,r,i)}transform(t,e,r,i,a,s){this._context.transform(t,e,r,i,a,s)}translate(t,e){this._context.translate(t,e)}_enableTrace(){var t=this,e=Ye.length,r=this.setAttr,i,a,s=function(o){var h=t[o],l;t[o]=function(){return a=mi(Array.prototype.slice.call(arguments,0)),l=h.apply(t,arguments),t._trace({method:o,args:a}),l}};for(i=0;i<e;i++)s(Ye[i]);t.setAttr=function(){r.apply(t,arguments);var o=arguments[0],h=arguments[1];(o==="shadowOffsetX"||o==="shadowOffsetY"||o==="shadowBlur")&&(h=h/this.canvas.getPixelRatio()),t._trace({property:o,val:h})}}_applyGlobalCompositeOperation(t){let e=t.attrs.globalCompositeOperation;var r=!e||e==="source-over";r||this.setAttr("globalCompositeOperation",e)}};wi.forEach(function(n){Object.defineProperty(kt.prototype,n,{get(){return this._context[n]},set(t){this._context[n]=t}})});var $t=class extends kt{_fillColor(t){var e=t.fill();this.setAttr("fillStyle",e),t._fillFunc(this)}_fillPattern(t){this.setAttr("fillStyle",t._getFillPattern()),t._fillFunc(this)}_fillLinearGradient(t){var e=t._getLinearGradient();e&&(this.setAttr("fillStyle",e),t._fillFunc(this))}_fillRadialGradient(t){var e=t._getRadialGradient();e&&(this.setAttr("fillStyle",e),t._fillFunc(this))}_fill(t){var e=t.fill(),r=t.getFillPriority();if(e&&r==="color"){this._fillColor(t);return}var i=t.getFillPatternImage();if(i&&r==="pattern"){this._fillPattern(t);return}var a=t.getFillLinearGradientColorStops();if(a&&r==="linear-gradient"){this._fillLinearGradient(t);return}var s=t.getFillRadialGradientColorStops();if(s&&r==="radial-gradient"){this._fillRadialGradient(t);return}e?this._fillColor(t):i?this._fillPattern(t):a?this._fillLinearGradient(t):s&&this._fillRadialGradient(t)}_strokeLinearGradient(t){var e=t.getStrokeLinearGradientStartPoint(),r=t.getStrokeLinearGradientEndPoint(),i=t.getStrokeLinearGradientColorStops(),a=this.createLinearGradient(e.x,e.y,r.x,r.y);if(i){for(var s=0;s<i.length;s+=2)a.addColorStop(i[s],i[s+1]);this.setAttr("strokeStyle",a)}}_stroke(t){var e=t.dash(),r=t.getStrokeScaleEnabled();if(t.hasStroke()){if(!r){this.save();var i=this.getCanvas().getPixelRatio();this.setTransform(i,0,0,i,0,0)}this._applyLineCap(t),e&&t.dashEnabled()&&(this.setLineDash(e),this.setAttr("lineDashOffset",t.dashOffset())),this.setAttr("lineWidth",t.strokeWidth()),t.getShadowForStrokeEnabled()||this.setAttr("shadowColor","rgba(0,0,0,0)");var a=t.getStrokeLinearGradientColorStops();a?this._strokeLinearGradient(t):this.setAttr("strokeStyle",t.stroke()),t._strokeFunc(this),r||this.restore()}}_applyShadow(t){var e,r,i,a=(e=t.getShadowRGBA())!==null&&e!==void 0?e:"black",s=(r=t.getShadowBlur())!==null&&r!==void 0?r:5,o=(i=t.getShadowOffset())!==null&&i!==void 0?i:{x:0,y:0},h=t.getAbsoluteScale(),l=this.canvas.getPixelRatio(),d=h.x*l,g=h.y*l;this.setAttr("shadowColor",a),this.setAttr("shadowBlur",s*Math.min(Math.abs(d),Math.abs(g))),this.setAttr("shadowOffsetX",o.x*d),this.setAttr("shadowOffsetY",o.y*g)}},te=class extends kt{_fill(t){this.save(),this.setAttr("fillStyle",t.colorKey),t._fillFuncHit(this),this.restore()}strokeShape(t){t.hasHitStroke()&&this._stroke(t)}_stroke(t){if(t.hasHitStroke()){var e=t.getStrokeScaleEnabled();if(!e){this.save();var r=this.getCanvas().getPixelRatio();this.setTransform(r,0,0,r,0,0)}this._applyLineCap(t);var i=t.hitStrokeWidth(),a=i==="auto"?t.strokeWidth():i;this.setAttr("lineWidth",a),this.setAttr("strokeStyle",t.colorKey),t._strokeFuncHit(this),e||this.restore()}}};var ee;function Ei(){if(ee)return ee;var n=m.createCanvasElement(),t=n.getContext("2d");return ee=function(){var e=E._global.devicePixelRatio||1,r=t.webkitBackingStorePixelRatio||t.mozBackingStorePixelRatio||t.msBackingStorePixelRatio||t.oBackingStorePixelRatio||t.backingStorePixelRatio||1;return e/r}(),ee}var Tt=class{constructor(t){this.pixelRatio=1,this.width=0,this.height=0,this.isCache=!1;var e=t||{},r=e.pixelRatio||E.pixelRatio||Ei();this.pixelRatio=r,this._canvas=m.createCanvasElement(),this._canvas.style.padding="0",this._canvas.style.margin="0",this._canvas.style.border="0",this._canvas.style.background="transparent",this._canvas.style.position="absolute",this._canvas.style.top="0",this._canvas.style.left="0"}getContext(){return this.context}getPixelRatio(){return this.pixelRatio}setPixelRatio(t){var e=this.pixelRatio;this.pixelRatio=t,this.setSize(this.getWidth()/e,this.getHeight()/e)}setWidth(t){this.width=this._canvas.width=t*this.pixelRatio,this._canvas.style.width=t+"px";var e=this.pixelRatio,r=this.getContext()._context;r.scale(e,e)}setHeight(t){this.height=this._canvas.height=t*this.pixelRatio,this._canvas.style.height=t+"px";var e=this.pixelRatio,r=this.getContext()._context;r.scale(e,e)}getWidth(){return this.width}getHeight(){return this.height}setSize(t,e){this.setWidth(t||0),this.setHeight(e||0)}toDataURL(t,e){try{return this._canvas.toDataURL(t,e)}catch(r){try{return this._canvas.toDataURL()}catch(i){return m.error("Unable to get data URL. "+i.message+" For more info read https://konvajs.org/docs/posts/Tainted_Canvas.html."),""}}}};f.addGetterSetter(Tt,"pixelRatio",void 0,S());var ht=class extends Tt{constructor(t={width:0,height:0}){super(t),this.context=new $t(this),this.setSize(t.width,t.height)}},wt=class extends Tt{constructor(t={width:0,height:0}){super(t),this.hitCanvas=!0,this.context=new te(this),this.setSize(t.width,t.height)}};var I={get isDragging(){var n=!1;return I._dragElements.forEach(t=>{t.dragStatus==="dragging"&&(n=!0)}),n},justDragged:!1,get node(){var n;return I._dragElements.forEach(t=>{n=t.node}),n},_dragElements:new Map,_drag(n){let t=[];I._dragElements.forEach((e,r)=>{let{node:i}=e,a=i.getStage();a.setPointersPositions(n),e.pointerId===void 0&&(e.pointerId=m._getFirstPointerId(n));let s=a._changedPointerPositions.find(l=>l.id===e.pointerId);if(!!s){if(e.dragStatus!=="dragging"){var o=i.dragDistance(),h=Math.max(Math.abs(s.x-e.startPointerPos.x),Math.abs(s.y-e.startPointerPos.y));if(h<o||(i.startDrag({evt:n}),!i.isDragging()))return}i._setDragPosition(n,e),t.push(i)}}),t.forEach(e=>{e.fire("dragmove",{type:"dragmove",target:e,evt:n},!0)})},_endDragBefore(n){I._dragElements.forEach(t=>{let{node:e}=t,r=e.getStage();if(n&&r.setPointersPositions(n),!r._changedPointerPositions.find(s=>s.id===t.pointerId))return;(t.dragStatus==="dragging"||t.dragStatus==="stopped")&&(I.justDragged=!0,E._mouseListenClick=!1,E._touchListenClick=!1,E._pointerListenClick=!1,t.dragStatus="stopped");let a=t.node.getLayer()||t.node instanceof E.Stage&&t.node;a&&a.batchDraw()})},_endDragAfter(n){I._dragElements.forEach((t,e)=>{t.dragStatus==="stopped"&&t.node.fire("dragend",{type:"dragend",target:t.node,evt:n},!0),t.dragStatus!=="dragging"&&I._dragElements.delete(e)})}};E.isBrowser&&(window.addEventListener("mouseup",I._endDragBefore,!0),window.addEventListener("touchend",I._endDragBefore,!0),window.addEventListener("mousemove",I._drag),window.addEventListener("touchmove",I._drag),window.addEventListener("mouseup",I._endDragAfter,!1),window.addEventListener("touchend",I._endDragAfter,!1));var ie="absoluteOpacity",re="allEventListeners",_t="absoluteTransform",Ve="absoluteScale",Ht="canvas",ki="Change",Ti="children",Ai="konva",Ce="listening",Xe="mouseenter",qe="mouseleave";var Ke="set",je="Shape",ae=" ",Qe="stage",Pt="transform",Mi="Stage",xe="visible",Ri=["xChange.konva","yChange.konva","scaleXChange.konva","scaleYChange.konva","skewXChange.konva","skewYChange.konva","rotationChange.konva","offsetXChange.konva","offsetYChange.konva","transformsEnabledChange.konva"].join(ae),Gi=1,b=class{constructor(t){this._id=Gi++,this.eventListeners={},this.attrs={},this.index=0,this._allEventListeners=null,this.parent=null,this._cache=new Map,this._attachedDepsListeners=new Map,this._lastPos=null,this._batchingTransformChange=!1,this._needClearTransformCache=!1,this._filterUpToDate=!1,this._isUnderCache=!1,this._dragEventId=null,this._shouldFireChangeEvents=!1,this.setAttrs(t),this._shouldFireChangeEvents=!0}hasChildren(){return!1}_clearCache(t){(t===Pt||t===_t)&&this._cache.get(t)?this._cache.get(t).dirty=!0:t?this._cache.delete(t):this._cache.clear()}_getCache(t,e){var r=this._cache.get(t),i=t===Pt||t===_t,a=r===void 0||i&&r.dirty===!0;return a&&(r=e.call(this),this._cache.set(t,r)),r}_calculate(t,e,r){if(!this._attachedDepsListeners.get(t)){let i=e.map(a=>a+"Change.konva").join(ae);this.on(i,()=>{this._clearCache(t)}),this._attachedDepsListeners.set(t,!0)}return this._getCache(t,r)}_getCanvasCache(){return this._cache.get(Ht)}_clearSelfAndDescendantCache(t){this._clearCache(t),t===_t&&this.fire("absoluteTransformChange")}clearCache(){return this._cache.delete(Ht),this._clearSelfAndDescendantCache(),this._requestDraw(),this}cache(t){var e=t||{},r={};(e.x===void 0||e.y===void 0||e.width===void 0||e.height===void 0)&&(r=this.getClientRect({skipTransform:!0,relativeTo:this.getParent()}));var i=Math.ceil(e.width||r.width),a=Math.ceil(e.height||r.height),s=e.pixelRatio,o=e.x===void 0?Math.floor(r.x):e.x,h=e.y===void 0?Math.floor(r.y):e.y,l=e.offset||0,d=e.drawBorder||!1,g=e.hitCanvasPixelRatio||1;if(!i||!a){m.error("Can not cache the node. Width or height of the node equals 0. Caching is skipped.");return}i+=l*2+1,a+=l*2+1,o-=l,h-=l;var c=new ht({pixelRatio:s,width:i,height:a}),p=new ht({pixelRatio:s,width:0,height:0}),u=new wt({pixelRatio:g,width:i,height:a}),_=c.getContext(),v=u.getContext();return u.isCache=!0,c.isCache=!0,this._cache.delete(Ht),this._filterUpToDate=!1,e.imageSmoothingEnabled===!1&&(c.getContext()._context.imageSmoothingEnabled=!1,p.getContext()._context.imageSmoothingEnabled=!1),_.save(),v.save(),_.translate(-o,-h),v.translate(-o,-h),this._isUnderCache=!0,this._clearSelfAndDescendantCache(ie),this._clearSelfAndDescendantCache(Ve),this.drawScene(c,this),this.drawHit(u,this),this._isUnderCache=!1,_.restore(),v.restore(),d&&(_.save(),_.beginPath(),_.rect(0,0,i,a),_.closePath(),_.setAttr("strokeStyle","red"),_.setAttr("lineWidth",5),_.stroke(),_.restore()),this._cache.set(Ht,{scene:c,filter:p,hit:u,x:o,y:h}),this._requestDraw(),this}isCached(){return this._cache.has(Ht)}getClientRect(t){throw new Error('abstract "getClientRect" method call')}_transformedRect(t,e){var r=[{x:t.x,y:t.y},{x:t.x+t.width,y:t.y},{x:t.x+t.width,y:t.y+t.height},{x:t.x,y:t.y+t.height}],i,a,s,o,h=this.getAbsoluteTransform(e);return r.forEach(function(l){var d=h.point(l);i===void 0&&(i=s=d.x,a=o=d.y),i=Math.min(i,d.x),a=Math.min(a,d.y),s=Math.max(s,d.x),o=Math.max(o,d.y)}),{x:i,y:a,width:s-i,height:o-a}}_drawCachedSceneCanvas(t){t.save(),t._applyOpacity(this),t._applyGlobalCompositeOperation(this);let e=this._getCanvasCache();t.translate(e.x,e.y);var r=this._getCachedSceneCanvas(),i=r.pixelRatio;t.drawImage(r._canvas,0,0,r.width/i,r.height/i),t.restore()}_drawCachedHitCanvas(t){var e=this._getCanvasCache(),r=e.hit;t.save(),t.translate(e.x,e.y),t.drawImage(r._canvas,0,0,r.width/r.pixelRatio,r.height/r.pixelRatio),t.restore()}_getCachedSceneCanvas(){var t=this.filters(),e=this._getCanvasCache(),r=e.scene,i=e.filter,a=i.getContext(),s,o,h,l;if(t){if(!this._filterUpToDate){var d=r.pixelRatio;i.setSize(r.width/r.pixelRatio,r.height/r.pixelRatio);try{for(s=t.length,a.clear(),a.drawImage(r._canvas,0,0,r.getWidth()/d,r.getHeight()/d),o=a.getImageData(0,0,i.getWidth(),i.getHeight()),h=0;h<s;h++){if(l=t[h],typeof l!="function"){m.error("Filter should be type of function, but got "+typeof l+" instead. Please check correct filters");continue}l.call(this,o),a.putImageData(o,0,0)}}catch(g){m.error("Unable to apply filter. "+g.message+" This post my help you https://konvajs.org/docs/posts/Tainted_Canvas.html.")}this._filterUpToDate=!0}return i}return r}on(t,e){if(this._cache&&this._cache.delete(re),arguments.length===3)return this._delegate.apply(this,arguments);var r=t.split(ae),i=r.length,a,s,o,h,l;for(a=0;a<i;a++)s=r[a],o=s.split("."),h=o[0],l=o[1]||"",this.eventListeners[h]||(this.eventListeners[h]=[]),this.eventListeners[h].push({name:l,handler:e});return this}off(t,e){var r=(t||"").split(ae),i=r.length,a,s,o,h,l,d;if(this._cache&&this._cache.delete(re),!t)for(s in this.eventListeners)this._off(s);for(a=0;a<i;a++)if(o=r[a],h=o.split("."),l=h[0],d=h[1],l)this.eventListeners[l]&&this._off(l,d,e);else for(s in this.eventListeners)this._off(s,d,e);return this}dispatchEvent(t){var e={target:this,type:t.type,evt:t};return this.fire(t.type,e),this}addEventListener(t,e){return this.on(t,function(r){e.call(this,r.evt)}),this}removeEventListener(t){return this.off(t),this}_delegate(t,e,r){var i=this;this.on(t,function(a){for(var s=a.target.findAncestors(e,!0,i),o=0;o<s.length;o++)a=m.cloneObject(a),a.currentTarget=s[o],r.call(s[o],a)})}remove(){return this.isDragging()&&this.stopDrag(),I._dragElements.delete(this._id),this._remove(),this}_clearCaches(){this._clearSelfAndDescendantCache(_t),this._clearSelfAndDescendantCache(ie),this._clearSelfAndDescendantCache(Ve),this._clearSelfAndDescendantCache(Qe),this._clearSelfAndDescendantCache(xe),this._clearSelfAndDescendantCache(Ce)}_remove(){this._clearCaches();var t=this.getParent();t&&t.children&&(t.children.splice(this.index,1),t._setChildrenIndices(),this.parent=null)}destroy(){return this.remove(),this}getAttr(t){var e="get"+m._capitalize(t);return m._isFunction(this[e])?this[e]():this.attrs[t]}getAncestors(){for(var t=this.getParent(),e=[];t;)e.push(t),t=t.getParent();return e}getAttrs(){return this.attrs||{}}setAttrs(t){return this._batchTransformChanges(()=>{var e,r;if(!t)return this;for(e in t)e!==Ti&&(r=Ke+m._capitalize(e),m._isFunction(this[r])?this[r](t[e]):this._setAttr(e,t[e]))}),this}isListening(){return this._getCache(Ce,this._isListening)}_isListening(t){if(!this.listening())return!1;let r=this.getParent();return r&&r!==t&&this!==t?r._isListening(t):!0}isVisible(){return this._getCache(xe,this._isVisible)}_isVisible(t){if(!this.visible())return!1;let r=this.getParent();return r&&r!==t&&this!==t?r._isVisible(t):!0}shouldDrawHit(t,e=!1){if(t)return this._isVisible(t)&&this._isListening(t);var r=this.getLayer(),i=!1;I._dragElements.forEach(s=>{s.dragStatus==="dragging"&&(s.node.nodeType==="Stage"||s.node.getLayer()===r)&&(i=!0)});var a=!e&&!E.hitOnDragEnabled&&i;return this.isListening()&&this.isVisible()&&!a}show(){return this.visible(!0),this}hide(){return this.visible(!1),this}getZIndex(){return this.index||0}getAbsoluteZIndex(){var t=this.getDepth(),e=this,r=0,i,a,s,o;function h(l){for(i=[],a=l.length,s=0;s<a;s++)o=l[s],r++,o.nodeType!==je&&(i=i.concat(o.getChildren().slice())),o._id===e._id&&(s=a);i.length>0&&i[0].getDepth()<=t&&h(i)}return e.nodeType!==Mi&&h(e.getStage().getChildren()),r}getDepth(){for(var t=0,e=this.parent;e;)t++,e=e.parent;return t}_batchTransformChanges(t){this._batchingTransformChange=!0,t(),this._batchingTransformChange=!1,this._needClearTransformCache&&(this._clearCache(Pt),this._clearSelfAndDescendantCache(_t)),this._needClearTransformCache=!1}setPosition(t){return this._batchTransformChanges(()=>{this.x(t.x),this.y(t.y)}),this}getPosition(){return{x:this.x(),y:this.y()}}getRelativePointerPosition(){if(!this.getStage())return null;var t=this.getStage().getPointerPosition();if(!t)return null;var e=this.getAbsoluteTransform().copy();return e.invert(),e.point(t)}getAbsolutePosition(t){let e=!1,r=this.parent;for(;r;){if(r.isCached()){e=!0;break}r=r.parent}e&&!t&&(t=!0);var i=this.getAbsoluteTransform(t).getMatrix(),a=new j,s=this.offset();return a.m=i.slice(),a.translate(s.x,s.y),a.getTranslation()}setAbsolutePosition(t){var e=this._clearTransform();this.attrs.x=e.x,this.attrs.y=e.y,delete e.x,delete e.y,this._clearCache(Pt);var r=this._getAbsoluteTransform().copy();return r.invert(),r.translate(t.x,t.y),t={x:this.attrs.x+r.getTranslation().x,y:this.attrs.y+r.getTranslation().y},this._setTransform(e),this.setPosition({x:t.x,y:t.y}),this._clearCache(Pt),this._clearSelfAndDescendantCache(_t),this}_setTransform(t){var e;for(e in t)this.attrs[e]=t[e]}_clearTransform(){var t={x:this.x(),y:this.y(),rotation:this.rotation(),scaleX:this.scaleX(),scaleY:this.scaleY(),offsetX:this.offsetX(),offsetY:this.offsetY(),skewX:this.skewX(),skewY:this.skewY()};return this.attrs.x=0,this.attrs.y=0,this.attrs.rotation=0,this.attrs.scaleX=1,this.attrs.scaleY=1,this.attrs.offsetX=0,this.attrs.offsetY=0,this.attrs.skewX=0,this.attrs.skewY=0,t}move(t){var e=t.x,r=t.y,i=this.x(),a=this.y();return e!==void 0&&(i+=e),r!==void 0&&(a+=r),this.setPosition({x:i,y:a}),this}_eachAncestorReverse(t,e){var r=[],i=this.getParent(),a,s;if(!(e&&e._id===this._id)){for(r.unshift(this);i&&(!e||i._id!==e._id);)r.unshift(i),i=i.parent;for(a=r.length,s=0;s<a;s++)t(r[s])}}rotate(t){return this.rotation(this.rotation()+t),this}moveToTop(){if(!this.parent)return m.warn("Node has no parent. moveToTop function is ignored."),!1;var t=this.index,e=this.parent.getChildren().length;return t<e-1?(this.parent.children.splice(t,1),this.parent.children.push(this),this.parent._setChildrenIndices(),!0):!1}moveUp(){if(!this.parent)return m.warn("Node has no parent. moveUp function is ignored."),!1;var t=this.index,e=this.parent.getChildren().length;return t<e-1?(this.parent.children.splice(t,1),this.parent.children.splice(t+1,0,this),this.parent._setChildrenIndices(),!0):!1}moveDown(){if(!this.parent)return m.warn("Node has no parent. moveDown function is ignored."),!1;var t=this.index;return t>0?(this.parent.children.splice(t,1),this.parent.children.splice(t-1,0,this),this.parent._setChildrenIndices(),!0):!1}moveToBottom(){if(!this.parent)return m.warn("Node has no parent. moveToBottom function is ignored."),!1;var t=this.index;return t>0?(this.parent.children.splice(t,1),this.parent.children.unshift(this),this.parent._setChildrenIndices(),!0):!1}setZIndex(t){if(!this.parent)return m.warn("Node has no parent. zIndex parameter is ignored."),this;(t<0||t>=this.parent.children.length)&&m.warn("Unexpected value "+t+" for zIndex property. zIndex is just index of a node in children of its parent. Expected value is from 0 to "+(this.parent.children.length-1)+".");var e=this.index;return this.parent.children.splice(e,1),this.parent.children.splice(t,0,this),this.parent._setChildrenIndices(),this}getAbsoluteOpacity(){return this._getCache(ie,this._getAbsoluteOpacity)}_getAbsoluteOpacity(){var t=this.opacity(),e=this.getParent();return e&&!e._isUnderCache&&(t*=e.getAbsoluteOpacity()),t}moveTo(t){return this.getParent()!==t&&(this._remove(),t.add(this)),this}toObject(){var t={},e=this.getAttrs(),r,i,a,s,o;t.attrs={};for(r in e)i=e[r],o=m.isObject(i)&&!m._isPlainObject(i)&&!m._isArray(i),!o&&(a=typeof this[r]=="function"&&this[r],delete e[r],s=a?a.call(this):null,e[r]=i,s!==i&&(t.attrs[r]=i));return t.className=this.getClassName(),m._prepareToStringify(t)}toJSON(){return JSON.stringify(this.toObject())}getParent(){return this.parent}findAncestors(t,e,r){var i=[];e&&this._isMatch(t)&&i.push(this);for(var a=this.parent;a;){if(a===r)return i;a._isMatch(t)&&i.push(a),a=a.parent}return i}isAncestorOf(t){return!1}findAncestor(t,e,r){return this.findAncestors(t,e,r)[0]}_isMatch(t){if(!t)return!1;if(typeof t=="function")return t(this);var e=t.replace(/ /g,"").split(","),r=e.length,i,a;for(i=0;i<r;i++)if(a=e[i],m.isValidSelector(a)||(m.warn('Selector "'+a+'" is invalid. Allowed selectors examples are "#foo", ".bar" or "Group".'),m.warn('If you have a custom shape with such className, please change it to start with upper letter like "Triangle".'),m.warn("Konva is awesome, right?")),a.charAt(0)==="#"){if(this.id()===a.slice(1))return!0}else if(a.charAt(0)==="."){if(this.hasName(a.slice(1)))return!0}else if(this.className===a||this.nodeType===a)return!0;return!1}getLayer(){var t=this.getParent();return t?t.getLayer():null}getStage(){return this._getCache(Qe,this._getStage)}_getStage(){var t=this.getParent();if(t)return t.getStage()}fire(t,e={},r){return e.target=e.target||this,r?this._fireAndBubble(t,e):this._fire(t,e),this}getAbsoluteTransform(t){return t?this._getAbsoluteTransform(t):this._getCache(_t,this._getAbsoluteTransform)}_getAbsoluteTransform(t){var e;if(t)return e=new j,this._eachAncestorReverse(function(i){var a=i.transformsEnabled();a==="all"?e.multiply(i.getTransform()):a==="position"&&e.translate(i.x()-i.offsetX(),i.y()-i.offsetY())},t),e;e=this._cache.get(_t)||new j,this.parent?this.parent.getAbsoluteTransform().copyInto(e):e.reset();var r=this.transformsEnabled();if(r==="all")e.multiply(this.getTransform());else if(r==="position"){let i=this.attrs.x||0,a=this.attrs.y||0,s=this.attrs.offsetX||0,o=this.attrs.offsetY||0;e.translate(i-s,a-o)}return e.dirty=!1,e}getAbsoluteScale(t){for(var e=this;e;)e._isUnderCache&&(t=e),e=e.getParent();let i=this.getAbsoluteTransform(t).decompose();return{x:i.scaleX,y:i.scaleY}}getAbsoluteRotation(){return this.getAbsoluteTransform().decompose().rotation}getTransform(){return this._getCache(Pt,this._getTransform)}_getTransform(){var t,e,r=this._cache.get(Pt)||new j;r.reset();var i=this.x(),a=this.y(),s=E.getAngle(this.rotation()),o=(t=this.attrs.scaleX)!==null&&t!==void 0?t:1,h=(e=this.attrs.scaleY)!==null&&e!==void 0?e:1,l=this.attrs.skewX||0,d=this.attrs.skewY||0,g=this.attrs.offsetX||0,c=this.attrs.offsetY||0;return(i!==0||a!==0)&&r.translate(i,a),s!==0&&r.rotate(s),(l!==0||d!==0)&&r.skew(l,d),(o!==1||h!==1)&&r.scale(o,h),(g!==0||c!==0)&&r.translate(-1*g,-1*c),r.dirty=!1,r}clone(t){var e=m.cloneObject(this.attrs),r,i,a,s,o;for(r in t)e[r]=t[r];var h=new this.constructor(e);for(r in this.eventListeners)for(i=this.eventListeners[r],a=i.length,s=0;s<a;s++)o=i[s],o.name.indexOf(Ai)<0&&(h.eventListeners[r]||(h.eventListeners[r]=[]),h.eventListeners[r].push(o));return h}_toKonvaCanvas(t){t=t||{};var e=this.getClientRect(),r=this.getStage(),i=t.x!==void 0?t.x:Math.floor(e.x),a=t.y!==void 0?t.y:Math.floor(e.y),s=t.pixelRatio||1,o=new ht({width:t.width||Math.ceil(e.width)||(r?r.width():0),height:t.height||Math.ceil(e.height)||(r?r.height():0),pixelRatio:s}),h=o.getContext();return t.imageSmoothingEnabled===!1&&(h._context.imageSmoothingEnabled=!1),h.save(),(i||a)&&h.translate(-1*i,-1*a),this.drawScene(o),h.restore(),o}toCanvas(t){return this._toKonvaCanvas(t)._canvas}toDataURL(t){t=t||{};var e=t.mimeType||null,r=t.quality||null,i=this._toKonvaCanvas(t).toDataURL(e,r);return t.callback&&t.callback(i),i}toImage(t){if(!t||!t.callback)throw"callback required for toImage method config argument";var e=t.callback;delete t.callback,m._urlToImage(this.toDataURL(t),function(r){e(r)})}setSize(t){return this.width(t.width),this.height(t.height),this}getSize(){return{width:this.width(),height:this.height()}}getClassName(){return this.className||this.nodeType}getType(){return this.nodeType}getDragDistance(){return this.attrs.dragDistance!==void 0?this.attrs.dragDistance:this.parent?this.parent.getDragDistance():E.dragDistance}_off(t,e,r){var i=this.eventListeners[t],a,s,o;for(a=0;a<i.length;a++)if(s=i[a].name,o=i[a].handler,(s!=="konva"||e==="konva")&&(!e||s===e)&&(!r||r===o)){if(i.splice(a,1),i.length===0){delete this.eventListeners[t];break}a--}}_fireChangeEvent(t,e,r){this._fire(t+ki,{oldVal:e,newVal:r})}addName(t){if(!this.hasName(t)){var e=this.name(),r=e?e+" "+t:t;this.name(r)}return this}hasName(t){if(!t)return!1;let e=this.name();if(!e)return!1;var r=(e||"").split(/\s/g);return r.indexOf(t)!==-1}removeName(t){var e=(this.name()||"").split(/\s/g),r=e.indexOf(t);return r!==-1&&(e.splice(r,1),this.name(e.join(" "))),this}setAttr(t,e){var r=this[Ke+m._capitalize(t)];return m._isFunction(r)?r.call(this,e):this._setAttr(t,e),this}_requestDraw(){if(E.autoDrawEnabled){let t=this.getLayer()||this.getStage();t==null||t.batchDraw()}}_setAttr(t,e){var r=this.attrs[t];r===e&&!m.isObject(e)||(e==null?delete this.attrs[t]:this.attrs[t]=e,this._shouldFireChangeEvents&&this._fireChangeEvent(t,r,e),this._requestDraw())}_setComponentAttr(t,e,r){var i;r!==void 0&&(i=this.attrs[t],i||(this.attrs[t]=this.getAttr(t)),this.attrs[t][e]=r,this._fireChangeEvent(t,i,r))}_fireAndBubble(t,e,r){e&&this.nodeType===je&&(e.target=this);var i=(t===Xe||t===qe)&&(r&&(this===r||this.isAncestorOf&&this.isAncestorOf(r))||this.nodeType==="Stage"&&!r);if(!i){this._fire(t,e);var a=(t===Xe||t===qe)&&r&&r.isAncestorOf&&r.isAncestorOf(this)&&!r.isAncestorOf(this.parent);(e&&!e.cancelBubble||!e)&&this.parent&&this.parent.isListening()&&!a&&(r&&r.parent?this._fireAndBubble.call(this.parent,t,e,r):this._fireAndBubble.call(this.parent,t,e))}}_getProtoListeners(t){let e=this._cache.get(re);if(!e){e={};let i=Object.getPrototypeOf(this);for(;i;){if(!i.eventListeners){i=Object.getPrototypeOf(i);continue}for(var r in i.eventListeners){let a=i.eventListeners[r],s=e[r]||[];e[r]=a.concat(s)}i=Object.getPrototypeOf(i)}this._cache.set(re,e)}return e[t]}_fire(t,e){e=e||{},e.currentTarget=this,e.type=t;let r=this._getProtoListeners(t);if(r)for(var i=0;i<r.length;i++)r[i].handler.call(this,e);let a=this.eventListeners[t];if(a)for(var i=0;i<a.length;i++)a[i].handler.call(this,e)}draw(){return this.drawScene(),this.drawHit(),this}_createDragElement(t){var e=t?t.pointerId:void 0,r=this.getStage(),i=this.getAbsolutePosition(),a=r._getPointerById(e)||r._changedPointerPositions[0]||i;I._dragElements.set(this._id,{node:this,startPointerPos:a,offset:{x:a.x-i.x,y:a.y-i.y},dragStatus:"ready",pointerId:e})}startDrag(t,e=!0){I._dragElements.has(this._id)||this._createDragElement(t);let r=I._dragElements.get(this._id);r.dragStatus="dragging",this.fire("dragstart",{type:"dragstart",target:this,evt:t&&t.evt},e)}_setDragPosition(t,e){let r=this.getStage()._getPointerById(e.pointerId);if(!!r){var i={x:r.x-e.offset.x,y:r.y-e.offset.y},a=this.dragBoundFunc();if(a!==void 0){let s=a.call(this,i,t);s?i=s:m.warn("dragBoundFunc did not return any value. That is unexpected behavior. You must return new absolute position from dragBoundFunc.")}(!this._lastPos||this._lastPos.x!==i.x||this._lastPos.y!==i.y)&&(this.setAbsolutePosition(i),this._requestDraw()),this._lastPos=i}}stopDrag(t){let e=I._dragElements.get(this._id);e&&(e.dragStatus="stopped"),I._endDragBefore(t),I._endDragAfter(t)}setDraggable(t){this._setAttr("draggable",t),this._dragChange()}isDragging(){let t=I._dragElements.get(this._id);return t?t.dragStatus==="dragging":!1}_listenDrag(){this._dragCleanup(),this.on("mousedown.konva touchstart.konva",function(t){var e=t.evt.button!==void 0,r=!e||E.dragButtons.indexOf(t.evt.button)>=0;if(!!r&&!this.isDragging()){var i=!1;I._dragElements.forEach(a=>{this.isAncestorOf(a.node)&&(i=!0)}),i||this._createDragElement(t)}})}_dragChange(){if(this.attrs.draggable)this._listenDrag();else{this._dragCleanup();var t=this.getStage();if(!t)return;let e=I._dragElements.get(this._id),r=e&&e.dragStatus==="dragging",i=e&&e.dragStatus==="ready";r?this.stopDrag():i&&I._dragElements.delete(this._id)}}_dragCleanup(){this.off("mousedown.konva"),this.off("touchstart.konva")}isClientRectOnScreen(t={x:0,y:0}){let e=this.getStage();if(!e)return!1;let r={x:-t.x,y:-t.y,width:e.width()+2*t.x,height:e.height()+2*t.y};return m.haveIntersection(r,this.getClientRect())}static create(t,e){return m._isString(t)&&(t=JSON.parse(t)),this._createNode(t,e)}static _createNode(t,e){var r=b.prototype.getClassName.call(t),i=t.children,a,s,o;e&&(t.attrs.container=e),E[r]||(m.warn('Can not find a node with class name "'+r+'". Fallback to "Shape".'),r="Shape");let h=E[r];if(a=new h(t.attrs),i)for(s=i.length,o=0;o<s;o++)a.add(b._createNode(i[o]));return a}};b.prototype.nodeType="Node";b.prototype._attrsAffectingSize=[];b.prototype.eventListeners={};b.prototype.on.call(b.prototype,Ri,function(){if(this._batchingTransformChange){this._needClearTransformCache=!0;return}this._clearCache(Pt),this._clearSelfAndDescendantCache(_t)});b.prototype.on.call(b.prototype,"visibleChange.konva",function(){this._clearSelfAndDescendantCache(xe)});b.prototype.on.call(b.prototype,"listeningChange.konva",function(){this._clearSelfAndDescendantCache(Ce)});b.prototype.on.call(b.prototype,"opacityChange.konva",function(){this._clearSelfAndDescendantCache(ie)});var W=f.addGetterSetter;W(b,"zIndex");W(b,"absolutePosition");W(b,"position");W(b,"x",0,S());W(b,"y",0,S());W(b,"globalCompositeOperation","source-over",vt());W(b,"opacity",1,S());W(b,"name","",vt());W(b,"id","",vt());W(b,"rotation",0,S());f.addComponentsGetterSetter(b,"scale",["x","y"]);W(b,"scaleX",1,S());W(b,"scaleY",1,S());f.addComponentsGetterSetter(b,"skew",["x","y"]);W(b,"skewX",0,S());W(b,"skewY",0,S());f.addComponentsGetterSetter(b,"offset",["x","y"]);W(b,"offsetX",0,S());W(b,"offsetY",0,S());W(b,"dragDistance",null,S());W(b,"width",0,S());W(b,"height",0,S());W(b,"listening",!0,J());W(b,"preventDefault",!0,J());W(b,"filters",null,function(n){return this._filterUpToDate=!1,n});W(b,"visible",!0,J());W(b,"transformsEnabled","all",vt());W(b,"size");W(b,"dragBoundFunc");W(b,"draggable",!1,J());f.backCompat(b,{rotateDeg:"rotate",setRotationDeg:"setRotation",getRotationDeg:"getRotation"});var Q=class extends b{constructor(){super(...arguments),this.children=[]}getChildren(t){if(!t)return this.children||[];let e=this.children||[];var r=[];return e.forEach(function(i){t(i)&&r.push(i)}),r}hasChildren(){return this.getChildren().length>0}removeChildren(){return this.getChildren().forEach(t=>{t.parent=null,t.index=0,t.remove()}),this.children=[],this._requestDraw(),this}destroyChildren(){return this.getChildren().forEach(t=>{t.parent=null,t.index=0,t.destroy()}),this.children=[],this._requestDraw(),this}add(...t){if(arguments.length>1){for(var e=0;e<arguments.length;e++)this.add(arguments[e]);return this}var r=t[0];return r.getParent()?(r.moveTo(this),this):(this._validateAdd(r),r.index=this.getChildren().length,r.parent=this,r._clearCaches(),this.getChildren().push(r),this._fire("add",{child:r}),this._requestDraw(),this)}destroy(){return this.hasChildren()&&this.destroyChildren(),super.destroy(),this}find(t){return this._generalFind(t,!1)}findOne(t){var e=this._generalFind(t,!0);return e.length>0?e[0]:void 0}_generalFind(t,e){var r=[];return this._descendants(i=>{let a=i._isMatch(t);return a&&r.push(i),!!(a&&e)}),r}_descendants(t){let e=!1,r=this.getChildren();for(let i of r){if(e=t(i),e)return!0;if(!!i.hasChildren()&&(e=i._descendants(t),e))return!0}return!1}toObject(){var t=b.prototype.toObject.call(this);return t.children=[],this.getChildren().forEach(e=>{t.children.push(e.toObject())}),t}isAncestorOf(t){for(var e=t.getParent();e;){if(e._id===this._id)return!0;e=e.getParent()}return!1}clone(t){var e=b.prototype.clone.call(this,t);return this.getChildren().forEach(function(r){e.add(r.clone())}),e}getAllIntersections(t){var e=[];return this.find("Shape").forEach(function(r){r.isVisible()&&r.intersects(t)&&e.push(r)}),e}_clearSelfAndDescendantCache(t){var e;super._clearSelfAndDescendantCache(t),!this.isCached()&&((e=this.children)===null||e===void 0||e.forEach(function(r){r._clearSelfAndDescendantCache(t)}))}_setChildrenIndices(){var t;(t=this.children)===null||t===void 0||t.forEach(function(e,r){e.index=r}),this._requestDraw()}drawScene(t,e){var r=this.getLayer(),i=t||r&&r.getCanvas(),a=i&&i.getContext(),s=this._getCanvasCache(),o=s&&s.scene,h=i&&i.isCache;if(!this.isVisible()&&!h)return this;if(o){a.save();var l=this.getAbsoluteTransform(e).getMatrix();a.transform(l[0],l[1],l[2],l[3],l[4],l[5]),this._drawCachedSceneCanvas(a),a.restore()}else this._drawChildren("drawScene",i,e);return this}drawHit(t,e){if(!this.shouldDrawHit(e))return this;var r=this.getLayer(),i=t||r&&r.hitCanvas,a=i&&i.getContext(),s=this._getCanvasCache(),o=s&&s.hit;if(o){a.save();var h=this.getAbsoluteTransform(e).getMatrix();a.transform(h[0],h[1],h[2],h[3],h[4],h[5]),this._drawCachedHitCanvas(a),a.restore()}else this._drawChildren("drawHit",i,e);return this}_drawChildren(t,e,r){var i,a=e&&e.getContext(),s=this.clipWidth(),o=this.clipHeight(),h=this.clipFunc(),l=s&&o||h;let d=r===this;if(l){a.save();var g=this.getAbsoluteTransform(r),c=g.getMatrix();if(a.transform(c[0],c[1],c[2],c[3],c[4],c[5]),a.beginPath(),h)h.call(this,a,this);else{var p=this.clipX(),u=this.clipY();a.rect(p,u,s,o)}a.clip(),c=g.copy().invert().getMatrix(),a.transform(c[0],c[1],c[2],c[3],c[4],c[5])}var _=!d&&this.globalCompositeOperation()!=="source-over"&&t==="drawScene";_&&(a.save(),a._applyGlobalCompositeOperation(this)),(i=this.children)===null||i===void 0||i.forEach(function(v){v[t](e,r)}),_&&a.restore(),l&&a.restore()}getClientRect(t){var e;t=t||{};var r=t.skipTransform,i=t.relativeTo,a,s,o,h,l={x:1/0,y:1/0,width:0,height:0},d=this;(e=this.children)===null||e===void 0||e.forEach(function(_){if(!!_.visible()){var v=_.getClientRect({relativeTo:d,skipShadow:t.skipShadow,skipStroke:t.skipStroke});v.width===0&&v.height===0||(a===void 0?(a=v.x,s=v.y,o=v.x+v.width,h=v.y+v.height):(a=Math.min(a,v.x),s=Math.min(s,v.y),o=Math.max(o,v.x+v.width),h=Math.max(h,v.y+v.height)))}});for(var g=this.find("Shape"),c=!1,p=0;p<g.length;p++){var u=g[p];if(u._isVisible(this)){c=!0;break}}return c&&a!==void 0?l={x:a,y:s,width:o-a,height:h-s}:l={x:0,y:0,width:0,height:0},r?l:this._transformedRect(l,i)}};f.addComponentsGetterSetter(Q,"clip",["x","y","width","height"]);f.addGetterSetter(Q,"clipX",void 0,S());f.addGetterSetter(Q,"clipY",void 0,S());f.addGetterSetter(Q,"clipWidth",void 0,S());f.addGetterSetter(Q,"clipHeight",void 0,S());f.addGetterSetter(Q,"clipFunc");var zt=new Map,Je=E._global.PointerEvent!==void 0;function ne(n){return zt.get(n)}function se(n){return{evt:n,pointerId:n.pointerId}}function oe(n,t){return zt.get(n)===t}function he(n,t){At(n),t.getStage()&&(zt.set(n,t),Je&&t._fire("gotpointercapture",se(new PointerEvent("gotpointercapture"))))}function At(n,t){let e=zt.get(n);if(!e)return;let r=e.getStage();r&&r.content,zt.delete(n),Je&&e._fire("lostpointercapture",se(new PointerEvent("lostpointercapture")))}var Oi="Stage",Li="string",$e="px",Ni="mouseout",er="mouseleave",rr="mouseover",ir="mouseenter",ar="mousemove",nr="mousedown",sr="mouseup",Wt="pointermove",Ut="pointerdown",Ot="pointerup",Yt="pointercancel",Di="lostpointercapture",le="pointerout",de="pointerleave",fe="pointerover",ue="pointerenter",Pe="contextmenu",or="touchstart",hr="touchend",lr="touchmove",dr="touchcancel",Ee="wheel",Ii=5,Fi=[[ir,"_pointerenter"],[nr,"_pointerdown"],[ar,"_pointermove"],[sr,"_pointerup"],[er,"_pointerleave"],[or,"_pointerdown"],[lr,"_pointermove"],[hr,"_pointerup"],[dr,"_pointercancel"],[rr,"_pointerover"],[Ee,"_wheel"],[Pe,"_contextmenu"],[Ut,"_pointerdown"],[Wt,"_pointermove"],[Ot,"_pointerup"],[Yt,"_pointercancel"],[Di,"_lostpointercapture"]],we={mouse:{[le]:Ni,[de]:er,[fe]:rr,[ue]:ir,[Wt]:ar,[Ut]:nr,[Ot]:sr,[Yt]:"mousecancel",pointerclick:"click",pointerdblclick:"dblclick"},touch:{[le]:"touchout",[de]:"touchleave",[fe]:"touchover",[ue]:"touchenter",[Wt]:lr,[Ut]:or,[Ot]:hr,[Yt]:dr,pointerclick:"tap",pointerdblclick:"dbltap"},pointer:{[le]:le,[de]:de,[fe]:fe,[ue]:ue,[Wt]:Wt,[Ut]:Ut,[Ot]:Ot,[Yt]:Yt,pointerclick:"pointerclick",pointerdblclick:"pointerdblclick"}},Vt=n=>n.indexOf("pointer")>=0?"pointer":n.indexOf("touch")>=0?"touch":"mouse",Gt=n=>{let t=Vt(n);if(t==="pointer")return E.pointerEventsEnabled&&we.pointer;if(t==="touch")return we.touch;if(t==="mouse")return we.mouse};function tr(n={}){return(n.clipFunc||n.clipWidth||n.clipHeight)&&m.warn("Stage does not support clipping. Please use clip for Layers or Groups."),n}var Bi="Pointer position is missing and not registered by the stage. Looks like it is outside of the stage container. You can set it manually from event: stage.setPointersPositions(event);",Xt=[],Mt=class extends Q{constructor(t){super(tr(t)),this._pointerPositions=[],this._changedPointerPositions=[],this._buildDOM(),this._bindContentEvents(),Xt.push(this),this.on("widthChange.konva heightChange.konva",this._resizeDOM),this.on("visibleChange.konva",this._checkVisibility),this.on("clipWidthChange.konva clipHeightChange.konva clipFuncChange.konva",()=>{tr(this.attrs)}),this._checkVisibility()}_validateAdd(t){let e=t.getType()==="Layer",r=t.getType()==="FastLayer";e||r||m.throw("You may only add layers to the stage.")}_checkVisibility(){if(!this.content)return;let t=this.visible()?"":"none";this.content.style.display=t}setContainer(t){if(typeof t===Li){if(t.charAt(0)==="."){var e=t.slice(1);t=document.getElementsByClassName(e)[0]}else{var r;t.charAt(0)!=="#"?r=t:r=t.slice(1),t=document.getElementById(r)}if(!t)throw"Can not find container in document with id "+r}return this._setAttr("container",t),this.content&&(this.content.parentElement&&this.content.parentElement.removeChild(this.content),t.appendChild(this.content)),this}shouldDrawHit(){return!0}clear(){var t=this.children,e=t.length,r;for(r=0;r<e;r++)t[r].clear();return this}clone(t){return t||(t={}),t.container=typeof document<"u"&&document.createElement("div"),Q.prototype.clone.call(this,t)}destroy(){super.destroy();var t=this.content;t&&m._isInDocument(t)&&this.container().removeChild(t);var e=Xt.indexOf(this);return e>-1&&Xt.splice(e,1),this}getPointerPosition(){let t=this._pointerPositions[0]||this._changedPointerPositions[0];return t?{x:t.x,y:t.y}:(m.warn(Bi),null)}_getPointerById(t){return this._pointerPositions.find(e=>e.id===t)}getPointersPositions(){return this._pointerPositions}getStage(){return this}getContent(){return this.content}_toKonvaCanvas(t){t=t||{},t.x=t.x||0,t.y=t.y||0,t.width=t.width||this.width(),t.height=t.height||this.height();var e=new ht({width:t.width,height:t.height,pixelRatio:t.pixelRatio||1}),r=e.getContext()._context,i=this.children;return(t.x||t.y)&&r.translate(-1*t.x,-1*t.y),i.forEach(function(a){if(!!a.isVisible()){var s=a._toKonvaCanvas(t);r.drawImage(s._canvas,t.x,t.y,s.getWidth()/s.getPixelRatio(),s.getHeight()/s.getPixelRatio())}}),e}getIntersection(t){if(!t)return null;var e=this.children,r=e.length,i=r-1,a;for(a=i;a>=0;a--){let s=e[a].getIntersection(t);if(s)return s}return null}_resizeDOM(){var t=this.width(),e=this.height();this.content&&(this.content.style.width=t+$e,this.content.style.height=e+$e),this.bufferCanvas.setSize(t,e),this.bufferHitCanvas.setSize(t,e),this.children.forEach(r=>{r.setSize({width:t,height:e}),r.draw()})}add(t,...e){if(arguments.length>1){for(var r=0;r<arguments.length;r++)this.add(arguments[r]);return this}super.add(t);var i=this.children.length;return i>Ii&&m.warn("The stage has "+i+" layers. Recommended maximum number of layers is 3-5. Adding more layers into the stage may drop the performance. Rethink your tree structure, you can use Konva.Group."),t.setSize({width:this.width(),height:this.height()}),t.draw(),E.isBrowser&&this.content.appendChild(t.canvas._canvas),this}getParent(){return null}getLayer(){return null}hasPointerCapture(t){return oe(t,this)}setPointerCapture(t){he(t,this)}releaseCapture(t){At(t,this)}getLayers(){return this.children}_bindContentEvents(){!E.isBrowser||Fi.forEach(([t,e])=>{this.content.addEventListener(t,r=>{this[e](r)})})}_pointerenter(t){this.setPointersPositions(t);let e=Gt(t.type);this._fire(e.pointerenter,{evt:t,target:this,currentTarget:this})}_pointerover(t){this.setPointersPositions(t);let e=Gt(t.type);this._fire(e.pointerover,{evt:t,target:this,currentTarget:this})}_getTargetShape(t){let e=this[t+"targetShape"];return e&&!e.getStage()&&(e=null),e}_pointerleave(t){let e=Gt(t.type),r=Vt(t.type);if(!!e){this.setPointersPositions(t);var i=this._getTargetShape(r),a=!I.isDragging||E.hitOnDragEnabled;i&&a?(i._fireAndBubble(e.pointerout,{evt:t}),i._fireAndBubble(e.pointerleave,{evt:t}),this._fire(e.pointerleave,{evt:t,target:this,currentTarget:this}),this[r+"targetShape"]=null):a&&(this._fire(e.pointerleave,{evt:t,target:this,currentTarget:this}),this._fire(e.pointerout,{evt:t,target:this,currentTarget:this})),this.pointerPos=void 0,this._pointerPositions=[]}}_pointerdown(t){let e=Gt(t.type),r=Vt(t.type);if(!!e){this.setPointersPositions(t);var i=!1;this._changedPointerPositions.forEach(a=>{var s=this.getIntersection(a);if(I.justDragged=!1,E["_"+r+"ListenClick"]=!0,!(s&&s.isListening()))return;E.capturePointerEventsEnabled&&s.setPointerCapture(a.id),this[r+"ClickStartShape"]=s,s._fireAndBubble(e.pointerdown,{evt:t,pointerId:a.id}),i=!0;let h=t.type.indexOf("touch")>=0;s.preventDefault()&&t.cancelable&&h&&t.preventDefault()}),i||this._fire(e.pointerdown,{evt:t,target:this,currentTarget:this,pointerId:this._pointerPositions[0].id})}}_pointermove(t){let e=Gt(t.type),r=Vt(t.type);if(!e)return;I.isDragging&&I.node.preventDefault()&&t.cancelable&&t.preventDefault(),this.setPointersPositions(t);var i=!I.isDragging||E.hitOnDragEnabled;if(!i)return;var a={};let s=!1;var o=this._getTargetShape(r);this._changedPointerPositions.forEach(h=>{let l=ne(h.id)||this.getIntersection(h),d=h.id,g={evt:t,pointerId:d};var c=o!==l;if(c&&o&&(o._fireAndBubble(e.pointerout,Object.assign({},g),l),o._fireAndBubble(e.pointerleave,Object.assign({},g),l)),l){if(a[l._id])return;a[l._id]=!0}l&&l.isListening()?(s=!0,c&&(l._fireAndBubble(e.pointerover,Object.assign({},g),o),l._fireAndBubble(e.pointerenter,Object.assign({},g),o),this[r+"targetShape"]=l),l._fireAndBubble(e.pointermove,Object.assign({},g))):o&&(this._fire(e.pointerover,{evt:t,target:this,currentTarget:this,pointerId:d}),this[r+"targetShape"]=null)}),s||this._fire(e.pointermove,{evt:t,target:this,currentTarget:this,pointerId:this._changedPointerPositions[0].id})}_pointerup(t){let e=Gt(t.type),r=Vt(t.type);if(!e)return;this.setPointersPositions(t);let i=this[r+"ClickStartShape"],a=this[r+"ClickEndShape"];var s={};let o=!1;this._changedPointerPositions.forEach(h=>{let l=ne(h.id)||this.getIntersection(h);if(l){if(l.releaseCapture(h.id),s[l._id])return;s[l._id]=!0}let d=h.id,g={evt:t,pointerId:d},c=!1;E["_"+r+"InDblClickWindow"]?(c=!0,clearTimeout(this[r+"DblTimeout"])):I.justDragged||(E["_"+r+"InDblClickWindow"]=!0,clearTimeout(this[r+"DblTimeout"])),this[r+"DblTimeout"]=setTimeout(function(){E["_"+r+"InDblClickWindow"]=!1},E.dblClickWindow),l&&l.isListening()?(o=!0,this[r+"ClickEndShape"]=l,l._fireAndBubble(e.pointerup,Object.assign({},g)),E["_"+r+"ListenClick"]&&i&&i===l&&(l._fireAndBubble(e.pointerclick,Object.assign({},g)),c&&a&&a===l&&l._fireAndBubble(e.pointerdblclick,Object.assign({},g)))):(this[r+"ClickEndShape"]=null,E["_"+r+"ListenClick"]&&this._fire(e.pointerclick,{evt:t,target:this,currentTarget:this,pointerId:d}),c&&this._fire(e.pointerdblclick,{evt:t,target:this,currentTarget:this,pointerId:d}))}),o||this._fire(e.pointerup,{evt:t,target:this,currentTarget:this,pointerId:this._changedPointerPositions[0].id}),E["_"+r+"ListenClick"]=!1,t.cancelable&&t.preventDefault()}_contextmenu(t){this.setPointersPositions(t);var e=this.getIntersection(this.getPointerPosition());e&&e.isListening()?e._fireAndBubble(Pe,{evt:t}):this._fire(Pe,{evt:t,target:this,currentTarget:this})}_wheel(t){this.setPointersPositions(t);var e=this.getIntersection(this.getPointerPosition());e&&e.isListening()?e._fireAndBubble(Ee,{evt:t}):this._fire(Ee,{evt:t,target:this,currentTarget:this})}_pointercancel(t){this.setPointersPositions(t);let e=ne(t.pointerId)||this.getIntersection(this.getPointerPosition());e&&e._fireAndBubble(Ot,se(t)),At(t.pointerId)}_lostpointercapture(t){At(t.pointerId)}setPointersPositions(t){var e=this._getContentPosition(),r=null,i=null;t=t||window.event,t.touches!==void 0?(this._pointerPositions=[],this._changedPointerPositions=[],Array.prototype.forEach.call(t.touches,a=>{this._pointerPositions.push({id:a.identifier,x:(a.clientX-e.left)/e.scaleX,y:(a.clientY-e.top)/e.scaleY})}),Array.prototype.forEach.call(t.changedTouches||t.touches,a=>{this._changedPointerPositions.push({id:a.identifier,x:(a.clientX-e.left)/e.scaleX,y:(a.clientY-e.top)/e.scaleY})})):(r=(t.clientX-e.left)/e.scaleX,i=(t.clientY-e.top)/e.scaleY,this.pointerPos={x:r,y:i},this._pointerPositions=[{x:r,y:i,id:m._getFirstPointerId(t)}],this._changedPointerPositions=[{x:r,y:i,id:m._getFirstPointerId(t)}])}_setPointerPosition(t){m.warn('Method _setPointerPosition is deprecated. Use "stage.setPointersPositions(event)" instead.'),this.setPointersPositions(t)}_getContentPosition(){if(!this.content||!this.content.getBoundingClientRect)return{top:0,left:0,scaleX:1,scaleY:1};var t=this.content.getBoundingClientRect();return{top:t.top,left:t.left,scaleX:t.width/this.content.clientWidth||1,scaleY:t.height/this.content.clientHeight||1}}_buildDOM(){if(this.bufferCanvas=new ht({width:this.width(),height:this.height()}),this.bufferHitCanvas=new wt({pixelRatio:1,width:this.width(),height:this.height()}),!!E.isBrowser){var t=this.container();if(!t)throw"Stage has no container. A container is required.";t.innerHTML="",this.content=document.createElement("div"),this.content.style.position="relative",this.content.style.userSelect="none",this.content.className="konvajs-content",this.content.setAttribute("role","presentation"),t.appendChild(this.content),this._resizeDOM()}}cache(){return m.warn("Cache function is not allowed for stage. You may use cache only for layers, groups and shapes."),this}clearCache(){return this}batchDraw(){return this.getChildren().forEach(function(t){t.batchDraw()}),this}};Mt.prototype.nodeType=Oi;N(Mt);f.addGetterSetter(Mt,"container");var fr="hasShadow",ur="shadowRGBA",cr="patternImage",gr="linearGradient",pr="radialGradient",ce;function ke(){return ce||(ce=m.createCanvasElement().getContext("2d"),ce)}var Rt={};function Hi(n){n.fill()}function zi(n){n.stroke()}function Wi(n){n.fill()}function Ui(n){n.stroke()}function Yi(){this._clearCache(fr)}function Vi(){this._clearCache(ur)}function Xi(){this._clearCache(cr)}function qi(){this._clearCache(gr)}function Ki(){this._clearCache(pr)}var y=class extends b{constructor(t){super(t);let e;for(;e=m.getRandomColor(),!(e&&!(e in Rt)););this.colorKey=e,Rt[e]=this}getContext(){return m.warn("shape.getContext() method is deprecated. Please do not use it."),this.getLayer().getContext()}getCanvas(){return m.warn("shape.getCanvas() method is deprecated. Please do not use it."),this.getLayer().getCanvas()}getSceneFunc(){return this.attrs.sceneFunc||this._sceneFunc}getHitFunc(){return this.attrs.hitFunc||this._hitFunc}hasShadow(){return this._getCache(fr,this._hasShadow)}_hasShadow(){return this.shadowEnabled()&&this.shadowOpacity()!==0&&!!(this.shadowColor()||this.shadowBlur()||this.shadowOffsetX()||this.shadowOffsetY())}_getFillPattern(){return this._getCache(cr,this.__getFillPattern)}__getFillPattern(){if(this.fillPatternImage()){var t=ke();let e=t.createPattern(this.fillPatternImage(),this.fillPatternRepeat()||"repeat");if(e&&e.setTransform){let r=new j;r.translate(this.fillPatternX(),this.fillPatternY()),r.rotate(E.getAngle(this.fillPatternRotation())),r.scale(this.fillPatternScaleX(),this.fillPatternScaleY()),r.translate(-1*this.fillPatternOffsetX(),-1*this.fillPatternOffsetY());let i=r.getMatrix(),a=typeof DOMMatrix>"u"?{a:i[0],b:i[1],c:i[2],d:i[3],e:i[4],f:i[5]}:new DOMMatrix(i);e.setTransform(a)}return e}}_getLinearGradient(){return this._getCache(gr,this.__getLinearGradient)}__getLinearGradient(){var t=this.fillLinearGradientColorStops();if(t){for(var e=ke(),r=this.fillLinearGradientStartPoint(),i=this.fillLinearGradientEndPoint(),a=e.createLinearGradient(r.x,r.y,i.x,i.y),s=0;s<t.length;s+=2)a.addColorStop(t[s],t[s+1]);return a}}_getRadialGradient(){return this._getCache(pr,this.__getRadialGradient)}__getRadialGradient(){var t=this.fillRadialGradientColorStops();if(t){for(var e=ke(),r=this.fillRadialGradientStartPoint(),i=this.fillRadialGradientEndPoint(),a=e.createRadialGradient(r.x,r.y,this.fillRadialGradientStartRadius(),i.x,i.y,this.fillRadialGradientEndRadius()),s=0;s<t.length;s+=2)a.addColorStop(t[s],t[s+1]);return a}}getShadowRGBA(){return this._getCache(ur,this._getShadowRGBA)}_getShadowRGBA(){if(this.hasShadow()){var t=m.colorToRGBA(this.shadowColor());return"rgba("+t.r+","+t.g+","+t.b+","+t.a*(this.shadowOpacity()||1)+")"}}hasFill(){return this._calculate("hasFill",["fillEnabled","fill","fillPatternImage","fillLinearGradientColorStops","fillRadialGradientColorStops"],()=>this.fillEnabled()&&!!(this.fill()||this.fillPatternImage()||this.fillLinearGradientColorStops()||this.fillRadialGradientColorStops()))}hasStroke(){return this._calculate("hasStroke",["strokeEnabled","strokeWidth","stroke","strokeLinearGradientColorStops"],()=>this.strokeEnabled()&&this.strokeWidth()&&!!(this.stroke()||this.strokeLinearGradientColorStops()))}hasHitStroke(){let t=this.hitStrokeWidth();return t==="auto"?this.hasStroke():this.strokeEnabled()&&!!t}intersects(t){var e=this.getStage(),r=e.bufferHitCanvas,i;return r.getContext().clear(),this.drawHit(r,null,!0),i=r.context.getImageData(Math.round(t.x),Math.round(t.y),1,1).data,i[3]>0}destroy(){return b.prototype.destroy.call(this),delete Rt[this.colorKey],delete this.colorKey,this}_useBufferCanvas(t){var e;if(!this.getStage()||!((e=this.attrs.perfectDrawEnabled)!==null&&e!==void 0?e:!0))return!1;let i=t||this.hasFill(),a=this.hasStroke(),s=this.getAbsoluteOpacity()!==1;if(i&&a&&s)return!0;let o=this.hasShadow(),h=this.shadowForStrokeEnabled();return!!(i&&a&&o&&h)}setStrokeHitEnabled(t){m.warn("strokeHitEnabled property is deprecated. Please use hitStrokeWidth instead."),t?this.hitStrokeWidth("auto"):this.hitStrokeWidth(0)}getStrokeHitEnabled(){return this.hitStrokeWidth()!==0}getSelfRect(){var t=this.size();return{x:this._centroid?-t.width/2:0,y:this._centroid?-t.height/2:0,width:t.width,height:t.height}}getClientRect(t={}){let e=t.skipTransform,r=t.relativeTo,i=this.getSelfRect(),s=!t.skipStroke&&this.hasStroke()&&this.strokeWidth()||0,o=i.width+s,h=i.height+s,l=!t.skipShadow&&this.hasShadow(),d=l?this.shadowOffsetX():0,g=l?this.shadowOffsetY():0,c=o+Math.abs(d),p=h+Math.abs(g),u=l&&this.shadowBlur()||0,_=c+u*2,v=p+u*2,w={width:_,height:v,x:-(s/2+u)+Math.min(d,0)+i.x,y:-(s/2+u)+Math.min(g,0)+i.y};return e?w:this._transformedRect(w,r)}drawScene(t,e){var r=this.getLayer(),i=t||r.getCanvas(),a=i.getContext(),s=this._getCanvasCache(),o=this.getSceneFunc(),h=this.hasShadow(),l,d,g,c=i.isCache,p=e===this;if(!this.isVisible()&&!p)return this;if(s){a.save();var u=this.getAbsoluteTransform(e).getMatrix();return a.transform(u[0],u[1],u[2],u[3],u[4],u[5]),this._drawCachedSceneCanvas(a),a.restore(),this}if(!o)return this;if(a.save(),this._useBufferCanvas()&&!c){l=this.getStage(),d=l.bufferCanvas,g=d.getContext(),g.clear(),g.save(),g._applyLineJoin(this);var _=this.getAbsoluteTransform(e).getMatrix();g.transform(_[0],_[1],_[2],_[3],_[4],_[5]),o.call(this,g,this),g.restore();var v=d.pixelRatio;h&&a._applyShadow(this),a._applyOpacity(this),a._applyGlobalCompositeOperation(this),a.drawImage(d._canvas,0,0,d.width/v,d.height/v)}else{if(a._applyLineJoin(this),!p){var _=this.getAbsoluteTransform(e).getMatrix();a.transform(_[0],_[1],_[2],_[3],_[4],_[5]),a._applyOpacity(this),a._applyGlobalCompositeOperation(this)}h&&a._applyShadow(this),o.call(this,a,this)}return a.restore(),this}drawHit(t,e,r=!1){if(!this.shouldDrawHit(e,r))return this;var i=this.getLayer(),a=t||i.hitCanvas,s=a&&a.getContext(),o=this.hitFunc()||this.sceneFunc(),h=this._getCanvasCache(),l=h&&h.hit;if(this.colorKey||m.warn("Looks like your canvas has a destroyed shape in it. Do not reuse shape after you destroyed it. If you want to reuse shape you should call remove() instead of destroy()"),l){s.save();var d=this.getAbsoluteTransform(e).getMatrix();return s.transform(d[0],d[1],d[2],d[3],d[4],d[5]),this._drawCachedHitCanvas(s),s.restore(),this}if(!o)return this;if(s.save(),s._applyLineJoin(this),!(this===e)){var c=this.getAbsoluteTransform(e).getMatrix();s.transform(c[0],c[1],c[2],c[3],c[4],c[5])}return o.call(this,s,this),s.restore(),this}drawHitFromCache(t=0){var e=this._getCanvasCache(),r=this._getCachedSceneCanvas(),i=e.hit,a=i.getContext(),s=i.getWidth(),o=i.getHeight(),h,l,d,g,c,p;a.clear(),a.drawImage(r._canvas,0,0,s,o);try{for(h=a.getImageData(0,0,s,o),l=h.data,d=l.length,g=m._hexToRgb(this.colorKey),c=0;c<d;c+=4)p=l[c+3],p>t?(l[c]=g.r,l[c+1]=g.g,l[c+2]=g.b,l[c+3]=255):l[c+3]=0;a.putImageData(h,0,0)}catch(u){m.error("Unable to draw hit graph from cached scene canvas. "+u.message)}return this}hasPointerCapture(t){return oe(t,this)}setPointerCapture(t){he(t,this)}releaseCapture(t){At(t,this)}};y.prototype._fillFunc=Hi;y.prototype._strokeFunc=zi;y.prototype._fillFuncHit=Wi;y.prototype._strokeFuncHit=Ui;y.prototype._centroid=!1;y.prototype.nodeType="Shape";N(y);y.prototype.eventListeners={};y.prototype.on.call(y.prototype,"shadowColorChange.konva shadowBlurChange.konva shadowOffsetChange.konva shadowOpacityChange.konva shadowEnabledChange.konva",Yi);y.prototype.on.call(y.prototype,"shadowColorChange.konva shadowOpacityChange.konva shadowEnabledChange.konva",Vi);y.prototype.on.call(y.prototype,"fillPriorityChange.konva fillPatternImageChange.konva fillPatternRepeatChange.konva fillPatternScaleXChange.konva fillPatternScaleYChange.konva fillPatternOffsetXChange.konva fillPatternOffsetYChange.konva fillPatternXChange.konva fillPatternYChange.konva fillPatternRotationChange.konva",Xi);y.prototype.on.call(y.prototype,"fillPriorityChange.konva fillLinearGradientColorStopsChange.konva fillLinearGradientStartPointXChange.konva fillLinearGradientStartPointYChange.konva fillLinearGradientEndPointXChange.konva fillLinearGradientEndPointYChange.konva",qi);y.prototype.on.call(y.prototype,"fillPriorityChange.konva fillRadialGradientColorStopsChange.konva fillRadialGradientStartPointXChange.konva fillRadialGradientStartPointYChange.konva fillRadialGradientEndPointXChange.konva fillRadialGradientEndPointYChange.konva fillRadialGradientStartRadiusChange.konva fillRadialGradientEndRadiusChange.konva",Ki);f.addGetterSetter(y,"stroke",void 0,be());f.addGetterSetter(y,"strokeWidth",2,S());f.addGetterSetter(y,"fillAfterStrokeEnabled",!1);f.addGetterSetter(y,"hitStrokeWidth","auto",It());f.addGetterSetter(y,"strokeHitEnabled",!0,J());f.addGetterSetter(y,"perfectDrawEnabled",!0,J());f.addGetterSetter(y,"shadowForStrokeEnabled",!0,J());f.addGetterSetter(y,"lineJoin");f.addGetterSetter(y,"lineCap");f.addGetterSetter(y,"sceneFunc");f.addGetterSetter(y,"hitFunc");f.addGetterSetter(y,"dash");f.addGetterSetter(y,"dashOffset",0,S());f.addGetterSetter(y,"shadowColor",void 0,vt());f.addGetterSetter(y,"shadowBlur",0,S());f.addGetterSetter(y,"shadowOpacity",1,S());f.addComponentsGetterSetter(y,"shadowOffset",["x","y"]);f.addGetterSetter(y,"shadowOffsetX",0,S());f.addGetterSetter(y,"shadowOffsetY",0,S());f.addGetterSetter(y,"fillPatternImage");f.addGetterSetter(y,"fill",void 0,be());f.addGetterSetter(y,"fillPatternX",0,S());f.addGetterSetter(y,"fillPatternY",0,S());f.addGetterSetter(y,"fillLinearGradientColorStops");f.addGetterSetter(y,"strokeLinearGradientColorStops");f.addGetterSetter(y,"fillRadialGradientStartRadius",0);f.addGetterSetter(y,"fillRadialGradientEndRadius",0);f.addGetterSetter(y,"fillRadialGradientColorStops");f.addGetterSetter(y,"fillPatternRepeat","repeat");f.addGetterSetter(y,"fillEnabled",!0);f.addGetterSetter(y,"strokeEnabled",!0);f.addGetterSetter(y,"shadowEnabled",!0);f.addGetterSetter(y,"dashEnabled",!0);f.addGetterSetter(y,"strokeScaleEnabled",!0);f.addGetterSetter(y,"fillPriority","color");f.addComponentsGetterSetter(y,"fillPatternOffset",["x","y"]);f.addGetterSetter(y,"fillPatternOffsetX",0,S());f.addGetterSetter(y,"fillPatternOffsetY",0,S());f.addComponentsGetterSetter(y,"fillPatternScale",["x","y"]);f.addGetterSetter(y,"fillPatternScaleX",1,S());f.addGetterSetter(y,"fillPatternScaleY",1,S());f.addComponentsGetterSetter(y,"fillLinearGradientStartPoint",["x","y"]);f.addComponentsGetterSetter(y,"strokeLinearGradientStartPoint",["x","y"]);f.addGetterSetter(y,"fillLinearGradientStartPointX",0);f.addGetterSetter(y,"strokeLinearGradientStartPointX",0);f.addGetterSetter(y,"fillLinearGradientStartPointY",0);f.addGetterSetter(y,"strokeLinearGradientStartPointY",0);f.addComponentsGetterSetter(y,"fillLinearGradientEndPoint",["x","y"]);f.addComponentsGetterSetter(y,"strokeLinearGradientEndPoint",["x","y"]);f.addGetterSetter(y,"fillLinearGradientEndPointX",0);f.addGetterSetter(y,"strokeLinearGradientEndPointX",0);f.addGetterSetter(y,"fillLinearGradientEndPointY",0);f.addGetterSetter(y,"strokeLinearGradientEndPointY",0);f.addComponentsGetterSetter(y,"fillRadialGradientStartPoint",["x","y"]);f.addGetterSetter(y,"fillRadialGradientStartPointX",0);f.addGetterSetter(y,"fillRadialGradientStartPointY",0);f.addComponentsGetterSetter(y,"fillRadialGradientEndPoint",["x","y"]);f.addGetterSetter(y,"fillRadialGradientEndPointX",0);f.addGetterSetter(y,"fillRadialGradientEndPointY",0);f.addGetterSetter(y,"fillPatternRotation",0);f.backCompat(y,{dashArray:"dash",getDashArray:"getDash",setDashArray:"getDash",drawFunc:"sceneFunc",getDrawFunc:"getSceneFunc",setDrawFunc:"setSceneFunc",drawHitFunc:"hitFunc",getDrawHitFunc:"getHitFunc",setDrawHitFunc:"setHitFunc"});var ji="#",Qi="beforeDraw",Ji="draw",mr=[{x:0,y:0},{x:-1,y:-1},{x:1,y:-1},{x:1,y:1},{x:-1,y:1}],Zi=mr.length,lt=class extends Q{constructor(t){super(t),this.canvas=new ht,this.hitCanvas=new wt({pixelRatio:1}),this._waitingForDraw=!1,this.on("visibleChange.konva",this._checkVisibility),this._checkVisibility(),this.on("imageSmoothingEnabledChange.konva",this._setSmoothEnabled),this._setSmoothEnabled()}createPNGStream(){return this.canvas._canvas.createPNGStream()}getCanvas(){return this.canvas}getNativeCanvasElement(){return this.canvas._canvas}getHitCanvas(){return this.hitCanvas}getContext(){return this.getCanvas().getContext()}clear(t){return this.getContext().clear(t),this.getHitCanvas().getContext().clear(t),this}setZIndex(t){super.setZIndex(t);var e=this.getStage();return e&&e.content&&(e.content.removeChild(this.getNativeCanvasElement()),t<e.children.length-1?e.content.insertBefore(this.getNativeCanvasElement(),e.children[t+1].getCanvas()._canvas):e.content.appendChild(this.getNativeCanvasElement())),this}moveToTop(){b.prototype.moveToTop.call(this);var t=this.getStage();return t&&t.content&&(t.content.removeChild(this.getNativeCanvasElement()),t.content.appendChild(this.getNativeCanvasElement())),!0}moveUp(){var t=b.prototype.moveUp.call(this);if(!t)return!1;var e=this.getStage();return!e||!e.content?!1:(e.content.removeChild(this.getNativeCanvasElement()),this.index<e.children.length-1?e.content.insertBefore(this.getNativeCanvasElement(),e.children[this.index+1].getCanvas()._canvas):e.content.appendChild(this.getNativeCanvasElement()),!0)}moveDown(){if(b.prototype.moveDown.call(this)){var t=this.getStage();if(t){var e=t.children;t.content&&(t.content.removeChild(this.getNativeCanvasElement()),t.content.insertBefore(this.getNativeCanvasElement(),e[this.index+1].getCanvas()._canvas))}return!0}return!1}moveToBottom(){if(b.prototype.moveToBottom.call(this)){var t=this.getStage();if(t){var e=t.children;t.content&&(t.content.removeChild(this.getNativeCanvasElement()),t.content.insertBefore(this.getNativeCanvasElement(),e[1].getCanvas()._canvas))}return!0}return!1}getLayer(){return this}remove(){var t=this.getNativeCanvasElement();return b.prototype.remove.call(this),t&&t.parentNode&&m._isInDocument(t)&&t.parentNode.removeChild(t),this}getStage(){return this.parent}setSize({width:t,height:e}){return this.canvas.setSize(t,e),this.hitCanvas.setSize(t,e),this._setSmoothEnabled(),this}_validateAdd(t){var e=t.getType();e!=="Group"&&e!=="Shape"&&m.throw("You may only add groups and shapes to a layer.")}_toKonvaCanvas(t){return t=t||{},t.width=t.width||this.getWidth(),t.height=t.height||this.getHeight(),t.x=t.x!==void 0?t.x:this.x(),t.y=t.y!==void 0?t.y:this.y(),b.prototype._toKonvaCanvas.call(this,t)}_checkVisibility(){this.visible()?this.canvas._canvas.style.display="block":this.canvas._canvas.style.display="none"}_setSmoothEnabled(){this.getContext()._context.imageSmoothingEnabled=this.imageSmoothingEnabled()}getWidth(){if(this.parent)return this.parent.width()}setWidth(){m.warn('Can not change width of layer. Use "stage.width(value)" function instead.')}getHeight(){if(this.parent)return this.parent.height()}setHeight(){m.warn('Can not change height of layer. Use "stage.height(value)" function instead.')}batchDraw(){return this._waitingForDraw||(this._waitingForDraw=!0,m.requestAnimFrame(()=>{this.draw(),this._waitingForDraw=!1})),this}getIntersection(t){if(!this.isListening()||!this.isVisible())return null;for(var e=1,r=!1;;){for(let i=0;i<Zi;i++){let a=mr[i],s=this._getIntersection({x:t.x+a.x*e,y:t.y+a.y*e}),o=s.shape;if(o)return o;if(r=!!s.antialiased,!s.antialiased)break}if(r)e+=1;else return null}}_getIntersection(t){let e=this.hitCanvas.pixelRatio,r=this.hitCanvas.context.getImageData(Math.round(t.x*e),Math.round(t.y*e),1,1).data,i=r[3];if(i===255){let a=m._rgbToHex(r[0],r[1],r[2]),s=Rt[ji+a];return s?{shape:s}:{antialiased:!0}}else if(i>0)return{antialiased:!0};return{}}drawScene(t,e){var r=this.getLayer(),i=t||r&&r.getCanvas();return this._fire(Qi,{node:this}),this.clearBeforeDraw()&&i.getContext().clear(),Q.prototype.drawScene.call(this,i,e),this._fire(Ji,{node:this}),this}drawHit(t,e){var r=this.getLayer(),i=t||r&&r.hitCanvas;return r&&r.clearBeforeDraw()&&r.getHitCanvas().getContext().clear(),Q.prototype.drawHit.call(this,i,e),this}enableHitGraph(){return this.hitGraphEnabled(!0),this}disableHitGraph(){return this.hitGraphEnabled(!1),this}setHitGraphEnabled(t){m.warn("hitGraphEnabled method is deprecated. Please use layer.listening() instead."),this.listening(t)}getHitGraphEnabled(t){return m.warn("hitGraphEnabled method is deprecated. Please use layer.listening() instead."),this.listening()}toggleHitCanvas(){if(!(!this.parent||!this.parent.content)){var t=this.parent,e=!!this.hitCanvas._canvas.parentNode;e?t.content.removeChild(this.hitCanvas._canvas):t.content.appendChild(this.hitCanvas._canvas)}}};lt.prototype.nodeType="Layer";N(lt);f.addGetterSetter(lt,"imageSmoothingEnabled",!0);f.addGetterSetter(lt,"clearBeforeDraw",!0);f.addGetterSetter(lt,"hitGraphEnabled",!0,J());var Lt=class extends lt{constructor(t){super(t),this.listening(!1),m.warn('Konva.Fast layer is deprecated. Please use "new Konva.Layer({ listening: false })" instead.')}};Lt.prototype.nodeType="FastLayer";N(Lt);var dt=class extends Q{_validateAdd(t){var e=t.getType();e!=="Group"&&e!=="Shape"&&m.throw("You may only add groups and shapes to groups.")}};dt.prototype.nodeType="Group";N(dt);var Te=function(){return Et.performance&&Et.performance.now?function(){return Et.performance.now()}:function(){return new Date().getTime()}}(),Z=class{constructor(t,e){this.id=Z.animIdCounter++,this.frame={time:0,timeDiff:0,lastTime:Te(),frameRate:0},this.func=t,this.setLayers(e)}setLayers(t){var e=[];return t?t.length>0?e=t:e=[t]:e=[],this.layers=e,this}getLayers(){return this.layers}addLayer(t){var e=this.layers,r=e.length,i;for(i=0;i<r;i++)if(e[i]._id===t._id)return!1;return this.layers.push(t),!0}isRunning(){var t=Z,e=t.animations,r=e.length,i;for(i=0;i<r;i++)if(e[i].id===this.id)return!0;return!1}start(){return this.stop(),this.frame.timeDiff=0,this.frame.lastTime=Te(),Z._addAnimation(this),this}stop(){return Z._removeAnimation(this),this}_updateFrameObject(t){this.frame.timeDiff=t-this.frame.lastTime,this.frame.lastTime=t,this.frame.time+=this.frame.timeDiff,this.frame.frameRate=1e3/this.frame.timeDiff}static _addAnimation(t){this.animations.push(t),this._handleAnimation()}static _removeAnimation(t){var e=t.id,r=this.animations,i=r.length,a;for(a=0;a<i;a++)if(r[a].id===e){this.animations.splice(a,1);break}}static _runFrames(){var t={},e=this.animations,r,i,a,s,o,h,l,d,g;for(s=0;s<e.length;s++)if(r=e[s],i=r.layers,a=r.func,r._updateFrameObject(Te()),h=i.length,a?g=a.call(r,r.frame)!==!1:g=!0,!!g)for(o=0;o<h;o++)l=i[o],l._id!==void 0&&(t[l._id]=l);for(d in t)!t.hasOwnProperty(d)||t[d].batchDraw()}static _animationLoop(){var t=Z;t.animations.length?(t._runFrames(),m.requestAnimFrame(t._animationLoop)):t.animRunning=!1}static _handleAnimation(){this.animRunning||(this.animRunning=!0,m.requestAnimFrame(this._animationLoop))}};Z.animations=[];Z.animIdCounter=0;Z.animRunning=!1;var $i={node:1,duration:1,easing:1,onFinish:1,yoyo:1},ta=1,vr=2,_r=3,ea=0,Sr=["fill","stroke","shadowColor"],Ae=class{constructor(t,e,r,i,a,s,o){this.prop=t,this.propFunc=e,this.begin=i,this._pos=i,this.duration=s,this._change=0,this.prevPos=0,this.yoyo=o,this._time=0,this._position=0,this._startTime=0,this._finish=0,this.func=r,this._change=a-this.begin,this.pause()}fire(t){var e=this[t];e&&e()}setTime(t){t>this.duration?this.yoyo?(this._time=this.duration,this.reverse()):this.finish():t<0?this.yoyo?(this._time=0,this.play()):this.reset():(this._time=t,this.update())}getTime(){return this._time}setPosition(t){this.prevPos=this._pos,this.propFunc(t),this._pos=t}getPosition(t){return t===void 0&&(t=this._time),this.func(t,this.begin,this._change,this.duration)}play(){this.state=vr,this._startTime=this.getTimer()-this._time,this.onEnterFrame(),this.fire("onPlay")}reverse(){this.state=_r,this._time=this.duration-this._time,this._startTime=this.getTimer()-this._time,this.onEnterFrame(),this.fire("onReverse")}seek(t){this.pause(),this._time=t,this.update(),this.fire("onSeek")}reset(){this.pause(),this._time=0,this.update(),this.fire("onReset")}finish(){this.pause(),this._time=this.duration,this.update(),this.fire("onFinish")}update(){this.setPosition(this.getPosition(this._time)),this.fire("onUpdate")}onEnterFrame(){var t=this.getTimer()-this._startTime;this.state===vr?this.setTime(t):this.state===_r&&this.setTime(this.duration-t)}pause(){this.state=ta,this.fire("onPause")}getTimer(){return new Date().getTime()}},V=class{constructor(t){var e=this,r=t.node,i=r._id,a,s=t.easing||Nt.Linear,o=!!t.yoyo,h;typeof t.duration>"u"?a=.3:t.duration===0?a=.001:a=t.duration,this.node=r,this._id=ea++;var l=r.getLayer()||(r instanceof E.Stage?r.getLayers():null);l||m.error("Tween constructor have `node` that is not in a layer. Please add node into layer first."),this.anim=new Z(function(){e.tween.onEnterFrame()},l),this.tween=new Ae(h,function(d){e._tweenFunc(d)},s,0,1,a*1e3,o),this._addListeners(),V.attrs[i]||(V.attrs[i]={}),V.attrs[i][this._id]||(V.attrs[i][this._id]={}),V.tweens[i]||(V.tweens[i]={});for(h in t)$i[h]===void 0&&this._addAttr(h,t[h]);this.reset(),this.onFinish=t.onFinish,this.onReset=t.onReset,this.onUpdate=t.onUpdate}_addAttr(t,e){var r=this.node,i=r._id,a,s,o,h,l,d,g,c;if(o=V.tweens[i][t],o&&delete V.attrs[i][o][t],a=r.getAttr(t),m._isArray(e))if(s=[],l=Math.max(e.length,a.length),t==="points"&&e.length!==a.length&&(e.length>a.length?(g=a,a=m._prepareArrayForTween(a,e,r.closed())):(d=e,e=m._prepareArrayForTween(e,a,r.closed()))),t.indexOf("fill")===0)for(h=0;h<l;h++)if(h%2===0)s.push(e[h]-a[h]);else{var p=m.colorToRGBA(a[h]);c=m.colorToRGBA(e[h]),a[h]=p,s.push({r:c.r-p.r,g:c.g-p.g,b:c.b-p.b,a:c.a-p.a})}else for(h=0;h<l;h++)s.push(e[h]-a[h]);else Sr.indexOf(t)!==-1?(a=m.colorToRGBA(a),c=m.colorToRGBA(e),s={r:c.r-a.r,g:c.g-a.g,b:c.b-a.b,a:c.a-a.a}):s=e-a;V.attrs[i][this._id][t]={start:a,diff:s,end:e,trueEnd:d,trueStart:g},V.tweens[i][t]=this._id}_tweenFunc(t){var e=this.node,r=V.attrs[e._id][this._id],i,a,s,o,h,l,d,g;for(i in r){if(a=r[i],s=a.start,o=a.diff,g=a.end,m._isArray(s))if(h=[],d=Math.max(s.length,g.length),i.indexOf("fill")===0)for(l=0;l<d;l++)l%2===0?h.push((s[l]||0)+o[l]*t):h.push("rgba("+Math.round(s[l].r+o[l].r*t)+","+Math.round(s[l].g+o[l].g*t)+","+Math.round(s[l].b+o[l].b*t)+","+(s[l].a+o[l].a*t)+")");else for(l=0;l<d;l++)h.push((s[l]||0)+o[l]*t);else Sr.indexOf(i)!==-1?h="rgba("+Math.round(s.r+o.r*t)+","+Math.round(s.g+o.g*t)+","+Math.round(s.b+o.b*t)+","+(s.a+o.a*t)+")":h=s+o*t;e.setAttr(i,h)}}_addListeners(){this.tween.onPlay=()=>{this.anim.start()},this.tween.onReverse=()=>{this.anim.start()},this.tween.onPause=()=>{this.anim.stop()},this.tween.onFinish=()=>{var t=this.node,e=V.attrs[t._id][this._id];e.points&&e.points.trueEnd&&t.setAttr("points",e.points.trueEnd),this.onFinish&&this.onFinish.call(this)},this.tween.onReset=()=>{var t=this.node,e=V.attrs[t._id][this._id];e.points&&e.points.trueStart&&t.points(e.points.trueStart),this.onReset&&this.onReset()},this.tween.onUpdate=()=>{this.onUpdate&&this.onUpdate.call(this)}}play(){return this.tween.play(),this}reverse(){return this.tween.reverse(),this}reset(){return this.tween.reset(),this}seek(t){return this.tween.seek(t*1e3),this}pause(){return this.tween.pause(),this}finish(){return this.tween.finish(),this}destroy(){var t=this.node._id,e=this._id,r=V.tweens[t],i;this.pause();for(i in r)delete V.tweens[t][i];delete V.attrs[t][e]}};V.attrs={};V.tweens={};b.prototype.to=function(n){var t=n.onFinish;n.node=this,n.onFinish=function(){this.destroy(),t&&t()};var e=new V(n);e.play()};var Nt={BackEaseIn(n,t,e,r){var i=1.70158;return e*(n/=r)*n*((i+1)*n-i)+t},BackEaseOut(n,t,e,r){var i=1.70158;return e*((n=n/r-1)*n*((i+1)*n+i)+1)+t},BackEaseInOut(n,t,e,r){var i=1.70158;return(n/=r/2)<1?e/2*(n*n*(((i*=1.525)+1)*n-i))+t:e/2*((n-=2)*n*(((i*=1.525)+1)*n+i)+2)+t},ElasticEaseIn(n,t,e,r,i,a){var s=0;return n===0?t:(n/=r)===1?t+e:(a||(a=r*.3),!i||i<Math.abs(e)?(i=e,s=a/4):s=a/(2*Math.PI)*Math.asin(e/i),-(i*Math.pow(2,10*(n-=1))*Math.sin((n*r-s)*(2*Math.PI)/a))+t)},ElasticEaseOut(n,t,e,r,i,a){var s=0;return n===0?t:(n/=r)===1?t+e:(a||(a=r*.3),!i||i<Math.abs(e)?(i=e,s=a/4):s=a/(2*Math.PI)*Math.asin(e/i),i*Math.pow(2,-10*n)*Math.sin((n*r-s)*(2*Math.PI)/a)+e+t)},ElasticEaseInOut(n,t,e,r,i,a){var s=0;return n===0?t:(n/=r/2)===2?t+e:(a||(a=r*(.3*1.5)),!i||i<Math.abs(e)?(i=e,s=a/4):s=a/(2*Math.PI)*Math.asin(e/i),n<1?-.5*(i*Math.pow(2,10*(n-=1))*Math.sin((n*r-s)*(2*Math.PI)/a))+t:i*Math.pow(2,-10*(n-=1))*Math.sin((n*r-s)*(2*Math.PI)/a)*.5+e+t)},BounceEaseOut(n,t,e,r){return(n/=r)<1/2.75?e*(7.5625*n*n)+t:n<2/2.75?e*(7.5625*(n-=1.5/2.75)*n+.75)+t:n<2.5/2.75?e*(7.5625*(n-=2.25/2.75)*n+.9375)+t:e*(7.5625*(n-=2.625/2.75)*n+.984375)+t},BounceEaseIn(n,t,e,r){return e-Nt.BounceEaseOut(r-n,0,e,r)+t},BounceEaseInOut(n,t,e,r){return n<r/2?Nt.BounceEaseIn(n*2,0,e,r)*.5+t:Nt.BounceEaseOut(n*2-r,0,e,r)*.5+e*.5+t},EaseIn(n,t,e,r){return e*(n/=r)*n+t},EaseOut(n,t,e,r){return-e*(n/=r)*(n-2)+t},EaseInOut(n,t,e,r){return(n/=r/2)<1?e/2*n*n+t:-e/2*(--n*(n-2)-1)+t},StrongEaseIn(n,t,e,r){return e*(n/=r)*n*n*n*n+t},StrongEaseOut(n,t,e,r){return e*((n=n/r-1)*n*n*n*n+1)+t},StrongEaseInOut(n,t,e,r){return(n/=r/2)<1?e/2*n*n*n*n*n+t:e/2*((n-=2)*n*n*n*n+2)+t},Linear(n,t,e,r){return e*n/r+t}};var Me=m._assign(E,{Util:m,Transform:j,Node:b,Container:Q,Stage:Mt,stages:Xt,Layer:lt,FastLayer:Lt,Group:dt,DD:I,Shape:y,shapes:Rt,Animation:Z,Tween:V,Easings:Nt,Context:kt,Canvas:Tt});var nt=class extends y{_sceneFunc(t){var e=E.getAngle(this.angle()),r=this.clockwise();t.beginPath(),t.arc(0,0,this.outerRadius(),0,e,r),t.arc(0,0,this.innerRadius(),e,0,!r),t.closePath(),t.fillStrokeShape(this)}getWidth(){return this.outerRadius()*2}getHeight(){return this.outerRadius()*2}setWidth(t){this.outerRadius(t/2)}setHeight(t){this.outerRadius(t/2)}getSelfRect(){let t=this.innerRadius(),e=this.outerRadius(),r=this.clockwise(),i=E.getAngle(r?360-this.angle():this.angle()),a=Math.cos(Math.min(i,Math.PI)),s=1,o=Math.sin(Math.min(Math.max(Math.PI,i),3*Math.PI/2)),h=Math.sin(Math.min(i,Math.PI/2)),l=a*(a>0?t:e),d=s*(s>0?e:t),g=o*(o>0?t:e),c=h*(h>0?e:t);return{x:l,y:r?-1*c:g,width:d-l,height:c-g}}};nt.prototype._centroid=!0;nt.prototype.className="Arc";nt.prototype._attrsAffectingSize=["innerRadius","outerRadius"];N(nt);f.addGetterSetter(nt,"innerRadius",0,S());f.addGetterSetter(nt,"outerRadius",0,S());f.addGetterSetter(nt,"angle",0,S());f.addGetterSetter(nt,"clockwise",!1,J());function Re(n,t,e,r,i,a,s){var o=Math.sqrt(Math.pow(e-n,2)+Math.pow(r-t,2)),h=Math.sqrt(Math.pow(i-e,2)+Math.pow(a-r,2)),l=s*o/(o+h),d=s*h/(o+h),g=e-l*(i-n),c=r-l*(a-t),p=e+d*(i-n),u=r+d*(a-t);return[g,c,p,u]}function yr(n,t){var e=n.length,r=[],i,a;for(i=2;i<e-2;i+=2)a=Re(n[i-2],n[i-1],n[i],n[i+1],n[i+2],n[i+3],t),!isNaN(a[0])&&(r.push(a[0]),r.push(a[1]),r.push(n[i]),r.push(n[i+1]),r.push(a[2]),r.push(a[3]));return r}var it=class extends y{constructor(t){super(t),this.on("pointsChange.konva tensionChange.konva closedChange.konva bezierChange.konva",function(){this._clearCache("tensionPoints")})}_sceneFunc(t){var e=this.points(),r=e.length,i=this.tension(),a=this.closed(),s=this.bezier(),o,h,l;if(!!r){if(t.beginPath(),t.moveTo(e[0],e[1]),i!==0&&r>4){for(o=this.getTensionPoints(),h=o.length,l=a?0:4,a||t.quadraticCurveTo(o[0],o[1],o[2],o[3]);l<h-2;)t.bezierCurveTo(o[l++],o[l++],o[l++],o[l++],o[l++],o[l++]);a||t.quadraticCurveTo(o[h-2],o[h-1],e[r-2],e[r-1])}else if(s)for(l=2;l<r;)t.bezierCurveTo(e[l++],e[l++],e[l++],e[l++],e[l++],e[l++]);else for(l=2;l<r;l+=2)t.lineTo(e[l],e[l+1]);a?(t.closePath(),t.fillStrokeShape(this)):t.strokeShape(this)}}getTensionPoints(){return this._getCache("tensionPoints",this._getTensionPoints)}_getTensionPoints(){return this.closed()?this._getTensionPointsClosed():yr(this.points(),this.tension())}_getTensionPointsClosed(){var t=this.points(),e=t.length,r=this.tension(),i=Re(t[e-2],t[e-1],t[0],t[1],t[2],t[3],r),a=Re(t[e-4],t[e-3],t[e-2],t[e-1],t[0],t[1],r),s=yr(t,r),o=[i[2],i[3]].concat(s).concat([a[0],a[1],t[e-2],t[e-1],a[2],a[3],i[0],i[1],t[0],t[1]]);return o}getWidth(){return this.getSelfRect().width}getHeight(){return this.getSelfRect().height}getSelfRect(){var t=this.points();if(t.length<4)return{x:t[0]||0,y:t[1]||0,width:0,height:0};this.tension()!==0?t=[t[0],t[1],...this._getTensionPoints(),t[t.length-2],t[t.length-1]]:t=this.points();for(var e=t[0],r=t[0],i=t[1],a=t[1],s,o,h=0;h<t.length/2;h++)s=t[h*2],o=t[h*2+1],e=Math.min(e,s),r=Math.max(r,s),i=Math.min(i,o),a=Math.max(a,o);return{x:e,y:i,width:r-e,height:a-i}}};it.prototype.className="Line";it.prototype._attrsAffectingSize=["points","bezier","tension"];N(it);f.addGetterSetter(it,"closed",!1);f.addGetterSetter(it,"bezier",!1);f.addGetterSetter(it,"tension",0,S());f.addGetterSetter(it,"points",[],ze());var B=class extends y{constructor(t){super(t),this.dataArray=[],this.pathLength=0,this.dataArray=B.parsePathData(this.data()),this.pathLength=0;for(var e=0;e<this.dataArray.length;++e)this.pathLength+=this.dataArray[e].pathLength;this.on("dataChange.konva",function(){this.dataArray=B.parsePathData(this.data()),this.pathLength=0;for(var r=0;r<this.dataArray.length;++r)this.pathLength+=this.dataArray[r].pathLength})}_sceneFunc(t){var e=this.dataArray;t.beginPath();for(var r=!1,i=0;i<e.length;i++){var a=e[i].command,s=e[i].points;switch(a){case"L":t.lineTo(s[0],s[1]);break;case"M":t.moveTo(s[0],s[1]);break;case"C":t.bezierCurveTo(s[0],s[1],s[2],s[3],s[4],s[5]);break;case"Q":t.quadraticCurveTo(s[0],s[1],s[2],s[3]);break;case"A":var o=s[0],h=s[1],l=s[2],d=s[3],g=s[4],c=s[5],p=s[6],u=s[7],_=l>d?l:d,v=l>d?1:l/d,w=l>d?d/l:1;t.translate(o,h),t.rotate(p),t.scale(v,w),t.arc(0,0,_,g,g+c,1-u),t.scale(1/v,1/w),t.rotate(-p),t.translate(-o,-h);break;case"z":r=!0,t.closePath();break}}!r&&!this.hasFill()?t.strokeShape(this):t.fillStrokeShape(this)}getSelfRect(){var t=[];this.dataArray.forEach(function(l){if(l.command==="A"){var d=l.points[4],g=l.points[5],c=l.points[4]+g,p=Math.PI/180;if(Math.abs(d-c)<p&&(p=Math.abs(d-c)),g<0)for(let u=d-p;u>c;u-=p){let _=B.getPointOnEllipticalArc(l.points[0],l.points[1],l.points[2],l.points[3],u,0);t.push(_.x,_.y)}else for(let u=d+p;u<c;u+=p){let _=B.getPointOnEllipticalArc(l.points[0],l.points[1],l.points[2],l.points[3],u,0);t.push(_.x,_.y)}}else if(l.command==="C")for(let u=0;u<=1;u+=.01){let _=B.getPointOnCubicBezier(u,l.start.x,l.start.y,l.points[0],l.points[1],l.points[2],l.points[3],l.points[4],l.points[5]);t.push(_.x,_.y)}else t=t.concat(l.points)});for(var e=t[0],r=t[0],i=t[1],a=t[1],s,o,h=0;h<t.length/2;h++)s=t[h*2],o=t[h*2+1],isNaN(s)||(e=Math.min(e,s),r=Math.max(r,s)),isNaN(o)||(i=Math.min(i,o),a=Math.max(a,o));return{x:e,y:i,width:r-e,height:a-i}}getLength(){return this.pathLength}getPointAtLength(t){var e,r=0,i=this.dataArray.length;if(!i)return null;for(;r<i&&t>this.dataArray[r].pathLength;)t-=this.dataArray[r].pathLength,++r;if(r===i)return e=this.dataArray[r-1].points.slice(-2),{x:e[0],y:e[1]};if(t<.01)return e=this.dataArray[r].points.slice(0,2),{x:e[0],y:e[1]};var a=this.dataArray[r],s=a.points;switch(a.command){case"L":return B.getPointOnLine(t,a.start.x,a.start.y,s[0],s[1]);case"C":return B.getPointOnCubicBezier(t/a.pathLength,a.start.x,a.start.y,s[0],s[1],s[2],s[3],s[4],s[5]);case"Q":return B.getPointOnQuadraticBezier(t/a.pathLength,a.start.x,a.start.y,s[0],s[1],s[2],s[3]);case"A":var o=s[0],h=s[1],l=s[2],d=s[3],g=s[4],c=s[5],p=s[6];return g+=c*t/a.pathLength,B.getPointOnEllipticalArc(o,h,l,d,g,p)}return null}static getLineLength(t,e,r,i){return Math.sqrt((r-t)*(r-t)+(i-e)*(i-e))}static getPointOnLine(t,e,r,i,a,s,o){s===void 0&&(s=e),o===void 0&&(o=r);var h=(a-r)/(i-e+1e-8),l=Math.sqrt(t*t/(1+h*h));i<e&&(l*=-1);var d=h*l,g;if(i===e)g={x:s,y:o+d};else if((o-r)/(s-e+1e-8)===h)g={x:s+l,y:o+d};else{var c,p,u=this.getLineLength(e,r,i,a),_=(s-e)*(i-e)+(o-r)*(a-r);_=_/(u*u),c=e+_*(i-e),p=r+_*(a-r);var v=this.getLineLength(s,o,c,p),w=Math.sqrt(t*t-v*v);l=Math.sqrt(w*w/(1+h*h)),i<e&&(l*=-1),d=h*l,g={x:c+l,y:p+d}}return g}static getPointOnCubicBezier(t,e,r,i,a,s,o,h,l){function d(v){return v*v*v}function g(v){return 3*v*v*(1-v)}function c(v){return 3*v*(1-v)*(1-v)}function p(v){return(1-v)*(1-v)*(1-v)}var u=h*d(t)+s*g(t)+i*c(t)+e*p(t),_=l*d(t)+o*g(t)+a*c(t)+r*p(t);return{x:u,y:_}}static getPointOnQuadraticBezier(t,e,r,i,a,s,o){function h(p){return p*p}function l(p){return 2*p*(1-p)}function d(p){return(1-p)*(1-p)}var g=s*h(t)+i*l(t)+e*d(t),c=o*h(t)+a*l(t)+r*d(t);return{x:g,y:c}}static getPointOnEllipticalArc(t,e,r,i,a,s){var o=Math.cos(s),h=Math.sin(s),l={x:r*Math.cos(a),y:i*Math.sin(a)};return{x:t+(l.x*o-l.y*h),y:e+(l.x*h+l.y*o)}}static parsePathData(t){if(!t)return[];var e=t,r=["m","M","l","L","v","V","h","H","z","Z","c","C","q","Q","t","T","s","S","a","A"];e=e.replace(new RegExp(" ","g"),",");for(var i=0;i<r.length;i++)e=e.replace(new RegExp(r[i],"g"),"|"+r[i]);var a=e.split("|"),s=[],o=[],h=0,l=0,d=/([-+]?((\d+\.\d+)|((\d+)|(\.\d+)))(?:e[-+]?\d+)?)/gi,g;for(i=1;i<a.length;i++){var c=a[i],p=c.charAt(0);for(c=c.slice(1),o.length=0;g=d.exec(c);)o.push(g[0]);for(var u=[],_=0,v=o.length;_<v;_++){if(o[_]==="00"){u.push(0,0);continue}var w=parseFloat(o[_]);isNaN(w)?u.push(0):u.push(w)}for(;u.length>0&&!isNaN(u[0]);){var x=null,C=[],P=h,A=l,k,R,T,G,O,M,D,L,Y,$;switch(p){case"l":h+=u.shift(),l+=u.shift(),x="L",C.push(h,l);break;case"L":h=u.shift(),l=u.shift(),C.push(h,l);break;case"m":var z=u.shift(),K=u.shift();if(h+=z,l+=K,x="M",s.length>2&&s[s.length-1].command==="z"){for(var tt=s.length-2;tt>=0;tt--)if(s[tt].command==="M"){h=s[tt].points[0]+z,l=s[tt].points[1]+K;break}}C.push(h,l),p="l";break;case"M":h=u.shift(),l=u.shift(),x="M",C.push(h,l),p="L";break;case"h":h+=u.shift(),x="L",C.push(h,l);break;case"H":h=u.shift(),x="L",C.push(h,l);break;case"v":l+=u.shift(),x="L",C.push(h,l);break;case"V":l=u.shift(),x="L",C.push(h,l);break;case"C":C.push(u.shift(),u.shift(),u.shift(),u.shift()),h=u.shift(),l=u.shift(),C.push(h,l);break;case"c":C.push(h+u.shift(),l+u.shift(),h+u.shift(),l+u.shift()),h+=u.shift(),l+=u.shift(),x="C",C.push(h,l);break;case"S":R=h,T=l,k=s[s.length-1],k.command==="C"&&(R=h+(h-k.points[2]),T=l+(l-k.points[3])),C.push(R,T,u.shift(),u.shift()),h=u.shift(),l=u.shift(),x="C",C.push(h,l);break;case"s":R=h,T=l,k=s[s.length-1],k.command==="C"&&(R=h+(h-k.points[2]),T=l+(l-k.points[3])),C.push(R,T,h+u.shift(),l+u.shift()),h+=u.shift(),l+=u.shift(),x="C",C.push(h,l);break;case"Q":C.push(u.shift(),u.shift()),h=u.shift(),l=u.shift(),C.push(h,l);break;case"q":C.push(h+u.shift(),l+u.shift()),h+=u.shift(),l+=u.shift(),x="Q",C.push(h,l);break;case"T":R=h,T=l,k=s[s.length-1],k.command==="Q"&&(R=h+(h-k.points[0]),T=l+(l-k.points[1])),h=u.shift(),l=u.shift(),x="Q",C.push(R,T,h,l);break;case"t":R=h,T=l,k=s[s.length-1],k.command==="Q"&&(R=h+(h-k.points[0]),T=l+(l-k.points[1])),h+=u.shift(),l+=u.shift(),x="Q",C.push(R,T,h,l);break;case"A":G=u.shift(),O=u.shift(),M=u.shift(),D=u.shift(),L=u.shift(),Y=h,$=l,h=u.shift(),l=u.shift(),x="A",C=this.convertEndpointToCenterParameterization(Y,$,h,l,D,L,G,O,M);break;case"a":G=u.shift(),O=u.shift(),M=u.shift(),D=u.shift(),L=u.shift(),Y=h,$=l,h+=u.shift(),l+=u.shift(),x="A",C=this.convertEndpointToCenterParameterization(Y,$,h,l,D,L,G,O,M);break}s.push({command:x||p,points:C,start:{x:P,y:A},pathLength:this.calcLength(P,A,x||p,C)})}(p==="z"||p==="Z")&&s.push({command:"z",points:[],start:void 0,pathLength:0})}return s}static calcLength(t,e,r,i){var a,s,o,h,l=B;switch(r){case"L":return l.getLineLength(t,e,i[0],i[1]);case"C":for(a=0,s=l.getPointOnCubicBezier(0,t,e,i[0],i[1],i[2],i[3],i[4],i[5]),h=.01;h<=1;h+=.01)o=l.getPointOnCubicBezier(h,t,e,i[0],i[1],i[2],i[3],i[4],i[5]),a+=l.getLineLength(s.x,s.y,o.x,o.y),s=o;return a;case"Q":for(a=0,s=l.getPointOnQuadraticBezier(0,t,e,i[0],i[1],i[2],i[3]),h=.01;h<=1;h+=.01)o=l.getPointOnQuadraticBezier(h,t,e,i[0],i[1],i[2],i[3]),a+=l.getLineLength(s.x,s.y,o.x,o.y),s=o;return a;case"A":a=0;var d=i[4],g=i[5],c=i[4]+g,p=Math.PI/180;if(Math.abs(d-c)<p&&(p=Math.abs(d-c)),s=l.getPointOnEllipticalArc(i[0],i[1],i[2],i[3],d,0),g<0)for(h=d-p;h>c;h-=p)o=l.getPointOnEllipticalArc(i[0],i[1],i[2],i[3],h,0),a+=l.getLineLength(s.x,s.y,o.x,o.y),s=o;else for(h=d+p;h<c;h+=p)o=l.getPointOnEllipticalArc(i[0],i[1],i[2],i[3],h,0),a+=l.getLineLength(s.x,s.y,o.x,o.y),s=o;return o=l.getPointOnEllipticalArc(i[0],i[1],i[2],i[3],c,0),a+=l.getLineLength(s.x,s.y,o.x,o.y),a}return 0}static convertEndpointToCenterParameterization(t,e,r,i,a,s,o,h,l){var d=l*(Math.PI/180),g=Math.cos(d)*(t-r)/2+Math.sin(d)*(e-i)/2,c=-1*Math.sin(d)*(t-r)/2+Math.cos(d)*(e-i)/2,p=g*g/(o*o)+c*c/(h*h);p>1&&(o*=Math.sqrt(p),h*=Math.sqrt(p));var u=Math.sqrt((o*o*(h*h)-o*o*(c*c)-h*h*(g*g))/(o*o*(c*c)+h*h*(g*g)));a===s&&(u*=-1),isNaN(u)&&(u=0);var _=u*o*c/h,v=u*-h*g/o,w=(t+r)/2+Math.cos(d)*_-Math.sin(d)*v,x=(e+i)/2+Math.sin(d)*_+Math.cos(d)*v,C=function(O){return Math.sqrt(O[0]*O[0]+O[1]*O[1])},P=function(O,M){return(O[0]*M[0]+O[1]*M[1])/(C(O)*C(M))},A=function(O,M){return(O[0]*M[1]<O[1]*M[0]?-1:1)*Math.acos(P(O,M))},k=A([1,0],[(g-_)/o,(c-v)/h]),R=[(g-_)/o,(c-v)/h],T=[(-1*g-_)/o,(-1*c-v)/h],G=A(R,T);return P(R,T)<=-1&&(G=Math.PI),P(R,T)>=1&&(G=0),s===0&&G>0&&(G=G-2*Math.PI),s===1&&G<0&&(G=G+2*Math.PI),[w,x,o,h,k,G,d,s]}};B.prototype.className="Path";B.prototype._attrsAffectingSize=["data"];N(B);f.addGetterSetter(B,"data");var ct=class extends it{_sceneFunc(t){super._sceneFunc(t);var e=Math.PI*2,r=this.points(),i=r,a=this.tension()!==0&&r.length>4;a&&(i=this.getTensionPoints());var s=this.pointerLength(),o=r.length,h,l;if(a){let c=[i[i.length-4],i[i.length-3],i[i.length-2],i[i.length-1],r[o-2],r[o-1]],p=B.calcLength(i[i.length-4],i[i.length-3],"C",c),u=B.getPointOnQuadraticBezier(Math.min(1,1-s/p),c[0],c[1],c[2],c[3],c[4],c[5]);h=r[o-2]-u.x,l=r[o-1]-u.y}else h=r[o-2]-r[o-4],l=r[o-1]-r[o-3];var d=(Math.atan2(l,h)+e)%e,g=this.pointerWidth();this.pointerAtEnding()&&(t.save(),t.beginPath(),t.translate(r[o-2],r[o-1]),t.rotate(d),t.moveTo(0,0),t.lineTo(-s,g/2),t.lineTo(-s,-g/2),t.closePath(),t.restore(),this.__fillStroke(t)),this.pointerAtBeginning()&&(t.save(),t.beginPath(),t.translate(r[0],r[1]),a?(h=(i[0]+i[2])/2-r[0],l=(i[1]+i[3])/2-r[1]):(h=r[2]-r[0],l=r[3]-r[1]),t.rotate((Math.atan2(-l,-h)+e)%e),t.moveTo(0,0),t.lineTo(-s,g/2),t.lineTo(-s,-g/2),t.closePath(),t.restore(),this.__fillStroke(t))}__fillStroke(t){var e=this.dashEnabled();e&&(this.attrs.dashEnabled=!1,t.setLineDash([])),t.fillStrokeShape(this),e&&(this.attrs.dashEnabled=!0)}getSelfRect(){let t=super.getSelfRect(),e=this.pointerWidth()/2;return{x:t.x-e,y:t.y-e,width:t.width+e*2,height:t.height+e*2}}};ct.prototype.className="Arrow";N(ct);f.addGetterSetter(ct,"pointerLength",10,S());f.addGetterSetter(ct,"pointerWidth",10,S());f.addGetterSetter(ct,"pointerAtBeginning",!1);f.addGetterSetter(ct,"pointerAtEnding",!0);var St=class extends y{_sceneFunc(t){t.beginPath(),t.arc(0,0,this.attrs.radius||0,0,Math.PI*2,!1),t.closePath(),t.fillStrokeShape(this)}getWidth(){return this.radius()*2}getHeight(){return this.radius()*2}setWidth(t){this.radius()!==t/2&&this.radius(t/2)}setHeight(t){this.radius()!==t/2&&this.radius(t/2)}};St.prototype._centroid=!0;St.prototype.className="Circle";St.prototype._attrsAffectingSize=["radius"];N(St);f.addGetterSetter(St,"radius",0,S());var ft=class extends y{_sceneFunc(t){var e=this.radiusX(),r=this.radiusY();t.beginPath(),t.save(),e!==r&&t.scale(1,r/e),t.arc(0,0,e,0,Math.PI*2,!1),t.restore(),t.closePath(),t.fillStrokeShape(this)}getWidth(){return this.radiusX()*2}getHeight(){return this.radiusY()*2}setWidth(t){this.radiusX(t/2)}setHeight(t){this.radiusY(t/2)}};ft.prototype.className="Ellipse";ft.prototype._centroid=!0;ft.prototype._attrsAffectingSize=["radiusX","radiusY"];N(ft);f.addComponentsGetterSetter(ft,"radius",["x","y"]);f.addGetterSetter(ft,"radiusX",0,S());f.addGetterSetter(ft,"radiusY",0,S());var rt=class extends y{constructor(t){super(t),this.on("imageChange.konva",()=>{this._setImageLoad()}),this._setImageLoad()}_setImageLoad(){let t=this.image();t&&t.complete||t&&t.readyState===4||t&&t.addEventListener&&t.addEventListener("load",()=>{this._requestDraw()})}_useBufferCanvas(){return super._useBufferCanvas(!0)}_sceneFunc(t){let e=this.getWidth(),r=this.getHeight(),i=this.attrs.image,a;if(i){let s=this.attrs.cropWidth,o=this.attrs.cropHeight;s&&o?a=[i,this.cropX(),this.cropY(),s,o,0,0,e,r]:a=[i,0,0,e,r]}(this.hasFill()||this.hasStroke())&&(t.beginPath(),t.rect(0,0,e,r),t.closePath(),t.fillStrokeShape(this)),i&&t.drawImage.apply(t,a)}_hitFunc(t){var e=this.width(),r=this.height();t.beginPath(),t.rect(0,0,e,r),t.closePath(),t.fillStrokeShape(this)}getWidth(){var t,e;return(t=this.attrs.width)!==null&&t!==void 0?t:(e=this.image())===null||e===void 0?void 0:e.width}getHeight(){var t,e;return(t=this.attrs.height)!==null&&t!==void 0?t:(e=this.image())===null||e===void 0?void 0:e.height}static fromURL(t,e,r=null){var i=m.createImageElement();i.onload=function(){var a=new rt({image:i});e(a)},i.onerror=r,i.crossOrigin="Anonymous",i.src=t}};rt.prototype.className="Image";N(rt);f.addGetterSetter(rt,"image");f.addComponentsGetterSetter(rt,"crop",["x","y","width","height"]);f.addGetterSetter(rt,"cropX",0,S());f.addGetterSetter(rt,"cropY",0,S());f.addGetterSetter(rt,"cropWidth",0,S());f.addGetterSetter(rt,"cropHeight",0,S());var br=["fontFamily","fontSize","fontStyle","padding","lineHeight","text","width","height"],ra="Change.konva",ia="none",Ge="up",Oe="right",Le="down",Ne="left",aa=br.length,Dt=class extends dt{constructor(t){super(t),this.on("add.konva",function(e){this._addListeners(e.child),this._sync()})}getText(){return this.find("Text")[0]}getTag(){return this.find("Tag")[0]}_addListeners(t){var e=this,r,i=function(){e._sync()};for(r=0;r<aa;r++)t.on(br[r]+ra,i)}getWidth(){return this.getText().width()}getHeight(){return this.getText().height()}_sync(){var t=this.getText(),e=this.getTag(),r,i,a,s,o,h,l;if(t&&e){switch(r=t.width(),i=t.height(),a=e.pointerDirection(),s=e.pointerWidth(),l=e.pointerHeight(),o=0,h=0,a){case Ge:o=r/2,h=-1*l;break;case Oe:o=r+s,h=i/2;break;case Le:o=r/2,h=i+l;break;case Ne:o=-1*s,h=i/2;break}e.setAttrs({x:-1*o,y:-1*h,width:r,height:i}),t.setAttrs({x:-1*o,y:-1*h})}}};Dt.prototype.className="Label";N(Dt);var gt=class extends y{_sceneFunc(t){var e=this.width(),r=this.height(),i=this.pointerDirection(),a=this.pointerWidth(),s=this.pointerHeight(),o=this.cornerRadius();let h=0,l=0,d=0,g=0;typeof o=="number"?h=l=d=g=Math.min(o,e/2,r/2):(h=Math.min(o[0]||0,e/2,r/2),l=Math.min(o[1]||0,e/2,r/2),g=Math.min(o[2]||0,e/2,r/2),d=Math.min(o[3]||0,e/2,r/2)),t.beginPath(),t.moveTo(h,0),i===Ge&&(t.lineTo((e-a)/2,0),t.lineTo(e/2,-1*s),t.lineTo((e+a)/2,0)),t.lineTo(e-l,0),t.arc(e-l,l,l,Math.PI*3/2,0,!1),i===Oe&&(t.lineTo(e,(r-s)/2),t.lineTo(e+a,r/2),t.lineTo(e,(r+s)/2)),t.lineTo(e,r-g),t.arc(e-g,r-g,g,0,Math.PI/2,!1),i===Le&&(t.lineTo((e+a)/2,r),t.lineTo(e/2,r+s),t.lineTo((e-a)/2,r)),t.lineTo(d,r),t.arc(d,r-d,d,Math.PI/2,Math.PI,!1),i===Ne&&(t.lineTo(0,(r+s)/2),t.lineTo(-1*a,r/2),t.lineTo(0,(r-s)/2)),t.lineTo(0,h),t.arc(h,h,h,Math.PI,Math.PI*3/2,!1),t.closePath(),t.fillStrokeShape(this)}getSelfRect(){var t=0,e=0,r=this.pointerWidth(),i=this.pointerHeight(),a=this.pointerDirection(),s=this.width(),o=this.height();return a===Ge?(e-=i,o+=i):a===Le?o+=i:a===Ne?(t-=r*1.5,s+=r):a===Oe&&(s+=r*1.5),{x:t,y:e,width:s,height:o}}};gt.prototype.className="Tag";N(gt);f.addGetterSetter(gt,"pointerDirection",ia);f.addGetterSetter(gt,"pointerWidth",0,S());f.addGetterSetter(gt,"pointerHeight",0,S());f.addGetterSetter(gt,"cornerRadius",0,Zt(4));var yt=class extends y{_sceneFunc(t){var e=this.cornerRadius(),r=this.width(),i=this.height();if(t.beginPath(),!e)t.rect(0,0,r,i);else{let a=0,s=0,o=0,h=0;typeof e=="number"?a=s=o=h=Math.min(e,r/2,i/2):(a=Math.min(e[0]||0,r/2,i/2),s=Math.min(e[1]||0,r/2,i/2),h=Math.min(e[2]||0,r/2,i/2),o=Math.min(e[3]||0,r/2,i/2)),t.moveTo(a,0),t.lineTo(r-s,0),t.arc(r-s,s,s,Math.PI*3/2,0,!1),t.lineTo(r,i-h),t.arc(r-h,i-h,h,0,Math.PI/2,!1),t.lineTo(o,i),t.arc(o,i-o,o,Math.PI/2,Math.PI,!1),t.lineTo(0,a),t.arc(a,a,a,Math.PI,Math.PI*3/2,!1)}t.closePath(),t.fillStrokeShape(this)}};yt.prototype.className="Rect";N(yt);f.addGetterSetter(yt,"cornerRadius",0,Zt(4));var pt=class extends y{_sceneFunc(t){let e=this._getPoints();t.beginPath(),t.moveTo(e[0].x,e[0].y);for(var r=1;r<e.length;r++)t.lineTo(e[r].x,e[r].y);t.closePath(),t.fillStrokeShape(this)}_getPoints(){let t=this.attrs.sides,e=this.attrs.radius||0,r=[];for(var i=0;i<t;i++)r.push({x:e*Math.sin(i*2*Math.PI/t),y:-1*e*Math.cos(i*2*Math.PI/t)});return r}getSelfRect(){let t=this._getPoints();var e=t[0].x,r=t[0].y,i=t[0].x,a=t[0].y;return t.forEach(s=>{e=Math.min(e,s.x),r=Math.max(r,s.x),i=Math.min(i,s.y),a=Math.max(a,s.y)}),{x:e,y:i,width:r-e,height:a-i}}getWidth(){return this.radius()*2}getHeight(){return this.radius()*2}setWidth(t){this.radius(t/2)}setHeight(t){this.radius(t/2)}};pt.prototype.className="RegularPolygon";pt.prototype._centroid=!0;pt.prototype._attrsAffectingSize=["radius"];N(pt);f.addGetterSetter(pt,"radius",0,S());f.addGetterSetter(pt,"sides",0,S());var Cr=Math.PI*2,mt=class extends y{_sceneFunc(t){t.beginPath(),t.arc(0,0,this.innerRadius(),0,Cr,!1),t.moveTo(this.outerRadius(),0),t.arc(0,0,this.outerRadius(),Cr,0,!0),t.closePath(),t.fillStrokeShape(this)}getWidth(){return this.outerRadius()*2}getHeight(){return this.outerRadius()*2}setWidth(t){this.outerRadius(t/2)}setHeight(t){this.outerRadius(t/2)}};mt.prototype.className="Ring";mt.prototype._centroid=!0;mt.prototype._attrsAffectingSize=["innerRadius","outerRadius"];N(mt);f.addGetterSetter(mt,"innerRadius",0,S());f.addGetterSetter(mt,"outerRadius",0,S());var at=class extends y{constructor(t){super(t),this._updated=!0,this.anim=new Z(()=>{var e=this._updated;return this._updated=!1,e}),this.on("animationChange.konva",function(){this.frameIndex(0)}),this.on("frameIndexChange.konva",function(){this._updated=!0}),this.on("frameRateChange.konva",function(){!this.anim.isRunning()||(clearInterval(this.interval),this._setInterval())})}_sceneFunc(t){var e=this.animation(),r=this.frameIndex(),i=r*4,a=this.animations()[e],s=this.frameOffsets(),o=a[i+0],h=a[i+1],l=a[i+2],d=a[i+3],g=this.image();if((this.hasFill()||this.hasStroke())&&(t.beginPath(),t.rect(0,0,l,d),t.closePath(),t.fillStrokeShape(this)),g)if(s){var c=s[e],p=r*2;t.drawImage(g,o,h,l,d,c[p+0],c[p+1],l,d)}else t.drawImage(g,o,h,l,d,0,0,l,d)}_hitFunc(t){var e=this.animation(),r=this.frameIndex(),i=r*4,a=this.animations()[e],s=this.frameOffsets(),o=a[i+2],h=a[i+3];if(t.beginPath(),s){var l=s[e],d=r*2;t.rect(l[d+0],l[d+1],o,h)}else t.rect(0,0,o,h);t.closePath(),t.fillShape(this)}_useBufferCanvas(){return super._useBufferCanvas(!0)}_setInterval(){var t=this;this.interval=setInterval(function(){t._updateIndex()},1e3/this.frameRate())}start(){if(!this.isRunning()){var t=this.getLayer();this.anim.setLayers(t),this._setInterval(),this.anim.start()}}stop(){this.anim.stop(),clearInterval(this.interval)}isRunning(){return this.anim.isRunning()}_updateIndex(){var t=this.frameIndex(),e=this.animation(),r=this.animations(),i=r[e],a=i.length/4;t<a-1?this.frameIndex(t+1):this.frameIndex(0)}};at.prototype.className="Sprite";N(at);f.addGetterSetter(at,"animation");f.addGetterSetter(at,"animations");f.addGetterSetter(at,"frameOffsets");f.addGetterSetter(at,"image");f.addGetterSetter(at,"frameIndex",0,S());f.addGetterSetter(at,"frameRate",17,S());f.backCompat(at,{index:"frameIndex",getIndex:"getFrameIndex",setIndex:"setFrameIndex"});var ut=class extends y{_sceneFunc(t){var e=this.innerRadius(),r=this.outerRadius(),i=this.numPoints();t.beginPath(),t.moveTo(0,0-r);for(var a=1;a<i*2;a++){var s=a%2===0?r:e,o=s*Math.sin(a*Math.PI/i),h=-1*s*Math.cos(a*Math.PI/i);t.lineTo(o,h)}t.closePath(),t.fillStrokeShape(this)}getWidth(){return this.outerRadius()*2}getHeight(){return this.outerRadius()*2}setWidth(t){this.outerRadius(t/2)}setHeight(t){this.outerRadius(t/2)}};ut.prototype.className="Star";ut.prototype._centroid=!0;ut.prototype._attrsAffectingSize=["innerRadius","outerRadius"];N(ut);f.addGetterSetter(ut,"numPoints",5,S());f.addGetterSetter(ut,"innerRadius",0,S());f.addGetterSetter(ut,"outerRadius",0,S());function Fe(n){return Array.from(n)}var ge="auto",na="center",qt="justify",sa="Change.konva",oa="2d",xr="-",Pr="left",ha="text",la="Text",da="top",fa="bottom",wr="middle",Er="normal",ua="px ",pe=" ",ca="right",ga="word",pa="char",ma="none",De="\u2026",kr=["fontFamily","fontSize","fontStyle","fontVariant","padding","align","verticalAlign","lineHeight","text","width","height","wrap","ellipsis","letterSpacing"],va=kr.length;function _a(n){return n.split(",").map(t=>{t=t.trim();let e=t.indexOf(" ")>=0,r=t.indexOf('"')>=0||t.indexOf("'")>=0;return e&&!r&&(t=`"${t}"`),t}).join(", ")}var me;function Ie(){return me||(me=m.createCanvasElement().getContext(oa),me)}function Sa(n){n.fillText(this._partialText,this._partialTextX,this._partialTextY)}function ya(n){n.strokeText(this._partialText,this._partialTextX,this._partialTextY)}function ba(n){return n=n||{},!n.fillLinearGradientColorStops&&!n.fillRadialGradientColorStops&&!n.fillPatternImage&&(n.fill=n.fill||"black"),n}var U=class extends y{constructor(t){super(ba(t)),this._partialTextX=0,this._partialTextY=0;for(var e=0;e<va;e++)this.on(kr[e]+sa,this._setTextData);this._setTextData()}_sceneFunc(t){var e=this.textArr,r=e.length;if(!!this.text()){var i=this.padding(),a=this.fontSize(),s=this.lineHeight()*a,o=this.verticalAlign(),h=0,l=this.align(),d=this.getWidth(),g=this.letterSpacing(),c=this.fill(),p=this.textDecoration(),u=p.indexOf("underline")!==-1,_=p.indexOf("line-through")!==-1,v,w=0,w=s/2,x=0,C=0;for(t.setAttr("font",this._getContextFont()),t.setAttr("textBaseline",wr),t.setAttr("textAlign",Pr),o===wr?h=(this.getHeight()-r*s-i*2)/2:o===fa&&(h=this.getHeight()-r*s-i*2),t.translate(i,h+i),v=0;v<r;v++){var x=0,C=0,P=e[v],A=P.text,k=P.width,R=P.lastInParagraph,T,G,O;if(t.save(),l===ca?x+=d-k-i*2:l===na&&(x+=(d-k-i*2)/2),u&&(t.save(),t.beginPath(),t.moveTo(x,w+C+Math.round(a/2)),T=A.split(" ").length-1,G=T===0,O=l===qt&&R&&!G?d-i*2:k,t.lineTo(x+Math.round(O),w+C+Math.round(a/2)),t.lineWidth=a/15,t.strokeStyle=c,t.stroke(),t.restore()),_&&(t.save(),t.beginPath(),t.moveTo(x,w+C),T=A.split(" ").length-1,G=T===0,O=l===qt&&R&&!G?d-i*2:k,t.lineTo(x+Math.round(O),w+C),t.lineWidth=a/15,t.strokeStyle=c,t.stroke(),t.restore()),g!==0||l===qt){T=A.split(" ").length-1;for(var M=Fe(A),D=0;D<M.length;D++){var L=M[D];L===" "&&!R&&l===qt&&(x+=(d-i*2-k)/T),this._partialTextX=x,this._partialTextY=w+C,this._partialText=L,t.fillStrokeShape(this),x+=this.measureSize(L).width+g}}else this._partialTextX=x,this._partialTextY=w+C,this._partialText=A,t.fillStrokeShape(this);t.restore(),r>1&&(w+=s)}}}_hitFunc(t){var e=this.getWidth(),r=this.getHeight();t.beginPath(),t.rect(0,0,e,r),t.closePath(),t.fillStrokeShape(this)}setText(t){var e=m._isString(t)?t:t==null?"":t+"";return this._setAttr(ha,e),this}getWidth(){var t=this.attrs.width===ge||this.attrs.width===void 0;return t?this.getTextWidth()+this.padding()*2:this.attrs.width}getHeight(){var t=this.attrs.height===ge||this.attrs.height===void 0;return t?this.fontSize()*this.textArr.length*this.lineHeight()+this.padding()*2:this.attrs.height}getTextWidth(){return this.textWidth}getTextHeight(){return m.warn("text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height."),this.textHeight}measureSize(t){var e=Ie(),r=this.fontSize(),i;return e.save(),e.font=this._getContextFont(),i=e.measureText(t),e.restore(),{width:i.width,height:r}}_getContextFont(){return this.fontStyle()+pe+this.fontVariant()+pe+(this.fontSize()+ua)+_a(this.fontFamily())}_addTextLine(t){this.align()===qt&&(t=t.trim());var e=this._getTextWidth(t);return this.textArr.push({text:t,width:e,lastInParagraph:!1})}_getTextWidth(t){var e=this.letterSpacing(),r=t.length;return Ie().measureText(t).width+(r?e*(r-1):0)}_setTextData(){var t=this.text().split(`
`),e=+this.fontSize(),r=0,i=this.lineHeight()*e,a=this.attrs.width,s=this.attrs.height,o=a!==ge&&a!==void 0,h=s!==ge&&s!==void 0,l=this.padding(),d=a-l*2,g=s-l*2,c=0,p=this.wrap(),u=p!==ma,_=p!==pa&&u,v=this.ellipsis();this.textArr=[],Ie().font=this._getContextFont();for(var w=v?this._getTextWidth(De):0,x=0,C=t.length;x<C;++x){var P=t[x],A=this._getTextWidth(P);if(o&&A>d)for(;P.length>0;){for(var k=0,R=P.length,T="",G=0;k<R;){var O=k+R>>>1,M=P.slice(0,O+1),D=this._getTextWidth(M)+w;D<=d?(k=O+1,T=M,G=D):R=O}if(T){if(_){var L,Y=P[T.length],$=Y===pe||Y===xr;$&&G<=d?L=T.length:L=Math.max(T.lastIndexOf(pe),T.lastIndexOf(xr))+1,L>0&&(k=L,T=T.slice(0,k),G=this._getTextWidth(T))}if(T=T.trimRight(),this._addTextLine(T),r=Math.max(r,G),c+=i,!u||h&&c+i>g){var z=this.textArr[this.textArr.length-1];if(z&&v){var K=this._getTextWidth(z.text+De)<d;K||(z.text=z.text.slice(0,z.text.length-3)),this.textArr.splice(this.textArr.length-1,1),this._addTextLine(z.text+De)}break}if(P=P.slice(k),P=P.trimLeft(),P.length>0&&(A=this._getTextWidth(P),A<=d)){this._addTextLine(P),c+=i,r=Math.max(r,A);break}}else break}else this._addTextLine(P),c+=i,r=Math.max(r,A);if(h&&c+i>g)break;this.textArr[this.textArr.length-1]&&(this.textArr[this.textArr.length-1].lastInParagraph=!0)}this.textHeight=e,this.textWidth=r}getStrokeScaleEnabled(){return!0}};U.prototype._fillFunc=Sa;U.prototype._strokeFunc=ya;U.prototype.className=la;U.prototype._attrsAffectingSize=["text","fontSize","padding","wrap","lineHeight","letterSpacing"];N(U);f.overWriteSetter(U,"width",It());f.overWriteSetter(U,"height",It());f.addGetterSetter(U,"fontFamily","Arial");f.addGetterSetter(U,"fontSize",12,S());f.addGetterSetter(U,"fontStyle",Er);f.addGetterSetter(U,"fontVariant",Er);f.addGetterSetter(U,"padding",0,S());f.addGetterSetter(U,"align",Pr);f.addGetterSetter(U,"verticalAlign",da);f.addGetterSetter(U,"lineHeight",1,S());f.addGetterSetter(U,"wrap",ga);f.addGetterSetter(U,"ellipsis",!1,J());f.addGetterSetter(U,"letterSpacing",0,S());f.addGetterSetter(U,"text","",vt());f.addGetterSetter(U,"textDecoration","");var Ca="",Tr="normal";function Ar(n){n.fillText(this.partialText,0,0)}function Mr(n){n.strokeText(this.partialText,0,0)}var q=class extends y{constructor(t){super(t),this.dummyCanvas=m.createCanvasElement(),this.dataArray=[],this.dataArray=B.parsePathData(this.attrs.data),this.on("dataChange.konva",function(){this.dataArray=B.parsePathData(this.attrs.data),this._setTextData()}),this.on("textChange.konva alignChange.konva letterSpacingChange.konva kerningFuncChange.konva fontSizeChange.konva fontFamilyChange.konva",this._setTextData),this._setTextData()}_sceneFunc(t){t.setAttr("font",this._getContextFont()),t.setAttr("textBaseline",this.textBaseline()),t.setAttr("textAlign","left"),t.save();var e=this.textDecoration(),r=this.fill(),i=this.fontSize(),a=this.glyphInfo;e==="underline"&&t.beginPath();for(var s=0;s<a.length;s++){t.save();var o=a[s].p0;t.translate(o.x,o.y),t.rotate(a[s].rotation),this.partialText=a[s].text,t.fillStrokeShape(this),e==="underline"&&(s===0&&t.moveTo(0,i/2+1),t.lineTo(i,i/2+1)),t.restore()}e==="underline"&&(t.strokeStyle=r,t.lineWidth=i/20,t.stroke()),t.restore()}_hitFunc(t){t.beginPath();var e=this.glyphInfo;if(e.length>=1){var r=e[0].p0;t.moveTo(r.x,r.y)}for(var i=0;i<e.length;i++){var a=e[i].p1;t.lineTo(a.x,a.y)}t.setAttr("lineWidth",this.fontSize()),t.setAttr("strokeStyle",this.colorKey),t.stroke()}getTextWidth(){return this.textWidth}getTextHeight(){return m.warn("text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height."),this.textHeight}setText(t){return U.prototype.setText.call(this,t)}_getContextFont(){return U.prototype._getContextFont.call(this)}_getTextSize(t){var e=this.dummyCanvas,r=e.getContext("2d");r.save(),r.font=this._getContextFont();var i=r.measureText(t);return r.restore(),{width:i.width,height:parseInt(this.attrs.fontSize,10)}}_setTextData(){var t=this,e=this._getTextSize(this.attrs.text),r=this.letterSpacing(),i=this.align(),a=this.kerningFunc();this.textWidth=e.width,this.textHeight=e.height;var s=Math.max(this.textWidth+((this.attrs.text||"").length-1)*r,0);this.glyphInfo=[];for(var o=0,h=0;h<t.dataArray.length;h++)t.dataArray[h].pathLength>0&&(o+=t.dataArray[h].pathLength);var l=0;i==="center"&&(l=Math.max(0,o/2-s/2)),i==="right"&&(l=Math.max(0,o-s));for(var d=Fe(this.text()),g=this.text().split(" ").length-1,c,p,u,_=-1,v=0,w=function(){v=0;for(var D=t.dataArray,L=_+1;L<D.length;L++){if(D[L].pathLength>0)return _=L,D[L];D[L].command==="M"&&(c={x:D[L].points[0],y:D[L].points[1]})}return{}},x=function(D){var L=t._getTextSize(D).width+r;D===" "&&i==="justify"&&(L+=(o-s)/g);var Y=0,$=0;for(p=void 0;Math.abs(L-Y)/L>.01&&$<20;){$++;for(var z=Y;u===void 0;)u=w(),u&&z+u.pathLength<L&&(z+=u.pathLength,u=void 0);if(u==={}||c===void 0)return;var K=!1;switch(u.command){case"L":B.getLineLength(c.x,c.y,u.points[0],u.points[1])>L?p=B.getPointOnLine(L,c.x,c.y,u.points[0],u.points[1],c.x,c.y):u=void 0;break;case"A":var tt=u.points[4],ot=u.points[5],F=u.points[4]+ot;v===0?v=tt+1e-8:L>Y?v+=Math.PI/180*ot/Math.abs(ot):v-=Math.PI/360*ot/Math.abs(ot),(ot<0&&v<F||ot>=0&&v>F)&&(v=F,K=!0),p=B.getPointOnEllipticalArc(u.points[0],u.points[1],u.points[2],u.points[3],v,u.points[6]);break;case"C":v===0?L>u.pathLength?v=1e-8:v=L/u.pathLength:L>Y?v+=(L-Y)/u.pathLength/2:v=Math.max(v-(Y-L)/u.pathLength/2,0),v>1&&(v=1,K=!0),p=B.getPointOnCubicBezier(v,u.start.x,u.start.y,u.points[0],u.points[1],u.points[2],u.points[3],u.points[4],u.points[5]);break;case"Q":v===0?v=L/u.pathLength:L>Y?v+=(L-Y)/u.pathLength:v-=(Y-L)/u.pathLength,v>1&&(v=1,K=!0),p=B.getPointOnQuadraticBezier(v,u.start.x,u.start.y,u.points[0],u.points[1],u.points[2],u.points[3]);break}p!==void 0&&(Y=B.getLineLength(c.x,c.y,p.x,p.y)),K&&(K=!1,u=void 0)}},C="C",P=t._getTextSize(C).width+r,A=l/P-1,k=0;k<A&&(x(C),!(c===void 0||p===void 0));k++)c=p;for(var R=0;R<d.length&&(x(d[R]),!(c===void 0||p===void 0));R++){var T=B.getLineLength(c.x,c.y,p.x,p.y),G=0;if(a)try{G=a(d[R-1],d[R])*this.fontSize()}catch(D){G=0}c.x+=G,p.x+=G,this.textWidth+=G;var O=B.getPointOnLine(G+T/2,c.x,c.y,p.x,p.y),M=Math.atan2(p.y-c.y,p.x-c.x);this.glyphInfo.push({transposeX:O.x,transposeY:O.y,text:d[R],rotation:M,p0:c,p1:p}),c=p}}getSelfRect(){if(!this.glyphInfo.length)return{x:0,y:0,width:0,height:0};var t=[];this.glyphInfo.forEach(function(d){t.push(d.p0.x),t.push(d.p0.y),t.push(d.p1.x),t.push(d.p1.y)});for(var e=t[0]||0,r=t[0]||0,i=t[1]||0,a=t[1]||0,s,o,h=0;h<t.length/2;h++)s=t[h*2],o=t[h*2+1],e=Math.min(e,s),r=Math.max(r,s),i=Math.min(i,o),a=Math.max(a,o);var l=this.fontSize();return{x:e-l/2,y:i-l/2,width:r-e+l,height:a-i+l}}};q.prototype._fillFunc=Ar;q.prototype._strokeFunc=Mr;q.prototype._fillFuncHit=Ar;q.prototype._strokeFuncHit=Mr;q.prototype.className="TextPath";q.prototype._attrsAffectingSize=["text","fontSize","data"];N(q);f.addGetterSetter(q,"data");f.addGetterSetter(q,"fontFamily","Arial");f.addGetterSetter(q,"fontSize",12,S());f.addGetterSetter(q,"fontStyle",Tr);f.addGetterSetter(q,"align","left");f.addGetterSetter(q,"letterSpacing",0,S());f.addGetterSetter(q,"textBaseline","middle");f.addGetterSetter(q,"fontVariant",Tr);f.addGetterSetter(q,"text",Ca);f.addGetterSetter(q,"textDecoration",null);f.addGetterSetter(q,"kerningFunc",null);var Or="tr-konva",xa=["resizeEnabledChange","rotateAnchorOffsetChange","rotateEnabledChange","enabledAnchorsChange","anchorSizeChange","borderEnabledChange","borderStrokeChange","borderStrokeWidthChange","borderDashChange","anchorStrokeChange","anchorStrokeWidthChange","anchorFillChange","anchorCornerRadiusChange","ignoreStrokeChange"].map(n=>n+`.${Or}`).join(" "),Rr="nodesRect",wa=["widthChange","heightChange","scaleXChange","scaleYChange","skewXChange","skewYChange","rotationChange","offsetXChange","offsetYChange","transformsEnabledChange","strokeWidthChange"],Pa={"top-left":-45,"top-center":0,"top-right":45,"middle-right":-90,"middle-left":90,"bottom-left":-135,"bottom-center":180,"bottom-right":135},Ea="ontouchstart"in E._global;function ka(n,t){if(n==="rotater")return"crosshair";t+=m.degToRad(Pa[n]||0);var e=(m.radToDeg(t)%360+360)%360;return m._inRange(e,315+22.5,360)||m._inRange(e,0,22.5)?"ns-resize":m._inRange(e,45-22.5,45+22.5)?"nesw-resize":m._inRange(e,90-22.5,90+22.5)?"ew-resize":m._inRange(e,135-22.5,135+22.5)?"nwse-resize":m._inRange(e,180-22.5,180+22.5)?"ns-resize":m._inRange(e,225-22.5,225+22.5)?"nesw-resize":m._inRange(e,270-22.5,270+22.5)?"ew-resize":m._inRange(e,315-22.5,315+22.5)?"nwse-resize":(m.error("Transformer has unknown angle for cursor detection: "+e),"pointer")}var ve=["top-left","top-center","top-right","middle-right","middle-left","bottom-left","bottom-center","bottom-right"],Gr=1e8;function Ta(n){return{x:n.x+n.width/2*Math.cos(n.rotation)+n.height/2*Math.sin(-n.rotation),y:n.y+n.height/2*Math.cos(n.rotation)+n.width/2*Math.sin(n.rotation)}}function Lr(n,t,e){let r=e.x+(n.x-e.x)*Math.cos(t)-(n.y-e.y)*Math.sin(t),i=e.y+(n.x-e.x)*Math.sin(t)+(n.y-e.y)*Math.cos(t);return Object.assign(Object.assign({},n),{rotation:n.rotation+t,x:r,y:i})}function Aa(n,t){let e=Ta(n);return Lr(n,t,e)}function Ma(n,t,e){let r=t;for(let i=0;i<n.length;i++){let a=E.getAngle(n[i]),s=Math.abs(a-t)%(Math.PI*2);Math.min(s,Math.PI*2-s)<e&&(r=a)}return r}var H=class extends dt{constructor(t){super(t),this._transforming=!1,this._createElements(),this._handleMouseMove=this._handleMouseMove.bind(this),this._handleMouseUp=this._handleMouseUp.bind(this),this.update=this.update.bind(this),this.on(xa,this.update),this.getNode()&&this.update()}attachTo(t){return this.setNode(t),this}setNode(t){return m.warn("tr.setNode(shape), tr.node(shape) and tr.attachTo(shape) methods are deprecated. Please use tr.nodes(nodesArray) instead."),this.setNodes([t])}getNode(){return this._nodes&&this._nodes[0]}_getEventNamespace(){return Or+this._id}setNodes(t=[]){this._nodes&&this._nodes.length&&this.detach(),this._nodes=t,t.length===1&&this.useSingleNodeRotation()?this.rotation(t[0].getAbsoluteRotation()):this.rotation(0),this._nodes.forEach(r=>{let i=()=>{this.nodes().length===1&&this.useSingleNodeRotation()&&this.rotation(this.nodes()[0].getAbsoluteRotation()),this._resetTransformCache(),!this._transforming&&!this.isDragging()&&this.update()},a=r._attrsAffectingSize.map(s=>s+"Change."+this._getEventNamespace()).join(" ");r.on(a,i),r.on(wa.map(s=>s+`.${this._getEventNamespace()}`).join(" "),i),r.on(`absoluteTransformChange.${this._getEventNamespace()}`,i),this._proxyDrag(r)}),this._resetTransformCache();var e=!!this.findOne(".top-left");return e&&this.update(),this}_proxyDrag(t){let e;t.on(`dragstart.${this._getEventNamespace()}`,r=>{e=t.getAbsolutePosition(),!this.isDragging()&&t!==this.findOne(".back")&&this.startDrag(r,!1)}),t.on(`dragmove.${this._getEventNamespace()}`,r=>{if(!e)return;let i=t.getAbsolutePosition(),a=i.x-e.x,s=i.y-e.y;this.nodes().forEach(o=>{if(o===t||o.isDragging())return;let h=o.getAbsolutePosition();o.setAbsolutePosition({x:h.x+a,y:h.y+s}),o.startDrag(r)}),e=null})}getNodes(){return this._nodes||[]}getActiveAnchor(){return this._movingAnchorName}detach(){this._nodes&&this._nodes.forEach(t=>{t.off("."+this._getEventNamespace())}),this._nodes=[],this._resetTransformCache()}_resetTransformCache(){this._clearCache(Rr),this._clearCache("transform"),this._clearSelfAndDescendantCache("absoluteTransform")}_getNodeRect(){return this._getCache(Rr,this.__getNodeRect)}__getNodeShape(t,e=this.rotation(),r){var i=t.getClientRect({skipTransform:!0,skipShadow:!0,skipStroke:this.ignoreStroke()}),a=t.getAbsoluteScale(r),s=t.getAbsolutePosition(r),o=i.x*a.x-t.offsetX()*a.x,h=i.y*a.y-t.offsetY()*a.y;let l=(E.getAngle(t.getAbsoluteRotation())+Math.PI*2)%(Math.PI*2),d={x:s.x+o*Math.cos(l)+h*Math.sin(-l),y:s.y+h*Math.cos(l)+o*Math.sin(l),width:i.width*a.x,height:i.height*a.y,rotation:l};return Lr(d,-E.getAngle(e),{x:0,y:0})}__getNodeRect(){var t=this.getNode();if(!t)return{x:-Gr,y:-Gr,width:0,height:0,rotation:0};let e=[];this.nodes().map(l=>{let d=l.getClientRect({skipTransform:!0,skipShadow:!0,skipStroke:this.ignoreStroke()});var g=[{x:d.x,y:d.y},{x:d.x+d.width,y:d.y},{x:d.x+d.width,y:d.y+d.height},{x:d.x,y:d.y+d.height}],c=l.getAbsoluteTransform();g.forEach(function(p){var u=c.point(p);e.push(u)})});let r=new j;r.rotate(-E.getAngle(this.rotation()));var i,a,s,o;e.forEach(function(l){var d=r.point(l);i===void 0&&(i=s=d.x,a=o=d.y),i=Math.min(i,d.x),a=Math.min(a,d.y),s=Math.max(s,d.x),o=Math.max(o,d.y)}),r.invert();let h=r.point({x:i,y:a});return{x:h.x,y:h.y,width:s-i,height:o-a,rotation:E.getAngle(this.rotation())}}getX(){return this._getNodeRect().x}getY(){return this._getNodeRect().y}getWidth(){return this._getNodeRect().width}getHeight(){return this._getNodeRect().height}_createElements(){this._createBack(),ve.forEach(function(t){this._createAnchor(t)}.bind(this)),this._createAnchor("rotater")}_createAnchor(t){var e=new yt({stroke:"rgb(0, 161, 255)",fill:"white",strokeWidth:1,name:t+" _anchor",dragDistance:0,draggable:!0,hitStrokeWidth:Ea?10:"auto"}),r=this;e.on("mousedown touchstart",function(i){r._handleMouseDown(i)}),e.on("dragstart",i=>{e.stopDrag(),i.cancelBubble=!0}),e.on("dragend",i=>{i.cancelBubble=!0}),e.on("mouseenter",()=>{var i=E.getAngle(this.rotation()),a=ka(t,i);e.getStage().content&&(e.getStage().content.style.cursor=a),this._cursorChange=!0}),e.on("mouseout",()=>{e.getStage().content&&(e.getStage().content.style.cursor=""),this._cursorChange=!1}),this.add(e)}_createBack(){var t=new y({name:"back",width:0,height:0,draggable:!0,sceneFunc(e){var r=this.getParent(),i=r.padding();e.beginPath(),e.rect(-i,-i,this.width()+i*2,this.height()+i*2),e.moveTo(this.width()/2,-i),r.rotateEnabled()&&e.lineTo(this.width()/2,-r.rotateAnchorOffset()*m._sign(this.height())-i),e.fillStrokeShape(this)},hitFunc:(e,r)=>{if(!!this.shouldOverdrawWholeArea()){var i=this.padding();e.beginPath(),e.rect(-i,-i,r.width()+i*2,r.height()+i*2),e.fillStrokeShape(r)}}});this.add(t),this._proxyDrag(t),t.on("dragstart",e=>{e.cancelBubble=!0}),t.on("dragmove",e=>{e.cancelBubble=!0}),t.on("dragend",e=>{e.cancelBubble=!0}),this.on("dragmove",e=>{this.update()})}_handleMouseDown(t){this._movingAnchorName=t.target.name().split(" ")[0];var e=this._getNodeRect(),r=e.width,i=e.height,a=Math.sqrt(Math.pow(r,2)+Math.pow(i,2));this.sin=Math.abs(i/a),this.cos=Math.abs(r/a),typeof window<"u"&&(window.addEventListener("mousemove",this._handleMouseMove),window.addEventListener("touchmove",this._handleMouseMove),window.addEventListener("mouseup",this._handleMouseUp,!0),window.addEventListener("touchend",this._handleMouseUp,!0)),this._transforming=!0;var s=t.target.getAbsolutePosition(),o=t.target.getStage().getPointerPosition();this._anchorDragOffset={x:o.x-s.x,y:o.y-s.y},this._fire("transformstart",{evt:t.evt,target:this.getNode()}),this._nodes.forEach(h=>{h._fire("transformstart",{evt:t.evt,target:h})})}_handleMouseMove(t){var e,r,i,a=this.findOne("."+this._movingAnchorName),s=a.getStage();s.setPointersPositions(t);let o=s.getPointerPosition(),h={x:o.x-this._anchorDragOffset.x,y:o.y-this._anchorDragOffset.y},l=a.getAbsolutePosition();this.anchorDragBoundFunc()&&(h=this.anchorDragBoundFunc()(l,h,t)),a.setAbsolutePosition(h);let d=a.getAbsolutePosition();if(!(l.x===d.x&&l.y===d.y)){if(this._movingAnchorName==="rotater"){var g=this._getNodeRect();e=a.x()-g.width/2,r=-a.y()+g.height/2;let D=Math.atan2(-r,e)+Math.PI/2;g.height<0&&(D-=Math.PI);var c=E.getAngle(this.rotation());let L=c+D,Y=E.getAngle(this.rotationSnapTolerance()),z=Ma(this.rotationSnaps(),L,Y)-g.rotation,K=Aa(g,z);this._fitNodesInto(K,t);return}var p=this.keepRatio()||t.shiftKey,x=this.centeredScaling()||t.altKey;if(this._movingAnchorName==="top-left"){if(p){var u=x?{x:this.width()/2,y:this.height()/2}:{x:this.findOne(".bottom-right").x(),y:this.findOne(".bottom-right").y()};i=Math.sqrt(Math.pow(u.x-a.x(),2)+Math.pow(u.y-a.y(),2));var _=this.findOne(".top-left").x()>u.x?-1:1,v=this.findOne(".top-left").y()>u.y?-1:1;e=i*this.cos*_,r=i*this.sin*v,this.findOne(".top-left").x(u.x-e),this.findOne(".top-left").y(u.y-r)}}else if(this._movingAnchorName==="top-center")this.findOne(".top-left").y(a.y());else if(this._movingAnchorName==="top-right"){if(p){var u=x?{x:this.width()/2,y:this.height()/2}:{x:this.findOne(".bottom-left").x(),y:this.findOne(".bottom-left").y()};i=Math.sqrt(Math.pow(a.x()-u.x,2)+Math.pow(u.y-a.y(),2));var _=this.findOne(".top-right").x()<u.x?-1:1,v=this.findOne(".top-right").y()>u.y?-1:1;e=i*this.cos*_,r=i*this.sin*v,this.findOne(".top-right").x(u.x+e),this.findOne(".top-right").y(u.y-r)}var w=a.position();this.findOne(".top-left").y(w.y),this.findOne(".bottom-right").x(w.x)}else if(this._movingAnchorName==="middle-left")this.findOne(".top-left").x(a.x());else if(this._movingAnchorName==="middle-right")this.findOne(".bottom-right").x(a.x());else if(this._movingAnchorName==="bottom-left"){if(p){var u=x?{x:this.width()/2,y:this.height()/2}:{x:this.findOne(".top-right").x(),y:this.findOne(".top-right").y()};i=Math.sqrt(Math.pow(u.x-a.x(),2)+Math.pow(a.y()-u.y,2));var _=u.x<a.x()?-1:1,v=a.y()<u.y?-1:1;e=i*this.cos*_,r=i*this.sin*v,a.x(u.x-e),a.y(u.y+r)}w=a.position(),this.findOne(".top-left").x(w.x),this.findOne(".bottom-right").y(w.y)}else if(this._movingAnchorName==="bottom-center")this.findOne(".bottom-right").y(a.y());else if(this._movingAnchorName==="bottom-right"){if(p){var u=x?{x:this.width()/2,y:this.height()/2}:{x:this.findOne(".top-left").x(),y:this.findOne(".top-left").y()};i=Math.sqrt(Math.pow(a.x()-u.x,2)+Math.pow(a.y()-u.y,2));var _=this.findOne(".bottom-right").x()<u.x?-1:1,v=this.findOne(".bottom-right").y()<u.y?-1:1;e=i*this.cos*_,r=i*this.sin*v,this.findOne(".bottom-right").x(u.x+e),this.findOne(".bottom-right").y(u.y+r)}}else console.error(new Error("Wrong position argument of selection resizer: "+this._movingAnchorName));var x=this.centeredScaling()||t.altKey;if(x){var C=this.findOne(".top-left"),P=this.findOne(".bottom-right"),A=C.x(),k=C.y(),R=this.getWidth()-P.x(),T=this.getHeight()-P.y();P.move({x:-A,y:-k}),C.move({x:R,y:T})}var G=this.findOne(".top-left").getAbsolutePosition();e=G.x,r=G.y;var O=this.findOne(".bottom-right").x()-this.findOne(".top-left").x(),M=this.findOne(".bottom-right").y()-this.findOne(".top-left").y();this._fitNodesInto({x:e,y:r,width:O,height:M,rotation:E.getAngle(this.rotation())},t)}}_handleMouseUp(t){this._removeEvents(t)}getAbsoluteTransform(){return this.getTransform()}_removeEvents(t){if(this._transforming){this._transforming=!1,typeof window<"u"&&(window.removeEventListener("mousemove",this._handleMouseMove),window.removeEventListener("touchmove",this._handleMouseMove),window.removeEventListener("mouseup",this._handleMouseUp,!0),window.removeEventListener("touchend",this._handleMouseUp,!0));var e=this.getNode();this._fire("transformend",{evt:t,target:e}),e&&this._nodes.forEach(r=>{r._fire("transformend",{evt:t,target:r})}),this._movingAnchorName=null}}_fitNodesInto(t,e){var r=this._getNodeRect();let i=1;if(m._inRange(t.width,-this.padding()*2-i,i)){this.update();return}if(m._inRange(t.height,-this.padding()*2-i,i)){this.update();return}let a=this.flipEnabled();var s=new j;if(s.rotate(E.getAngle(this.rotation())),this._movingAnchorName&&t.width<0&&this._movingAnchorName.indexOf("left")>=0){let g=s.point({x:-this.padding()*2,y:0});if(t.x+=g.x,t.y+=g.y,t.width+=this.padding()*2,this._movingAnchorName=this._movingAnchorName.replace("left","right"),this._anchorDragOffset.x-=g.x,this._anchorDragOffset.y-=g.y,!a){this.update();return}}else if(this._movingAnchorName&&t.width<0&&this._movingAnchorName.indexOf("right")>=0){let g=s.point({x:this.padding()*2,y:0});if(this._movingAnchorName=this._movingAnchorName.replace("right","left"),this._anchorDragOffset.x-=g.x,this._anchorDragOffset.y-=g.y,t.width+=this.padding()*2,!a){this.update();return}}if(this._movingAnchorName&&t.height<0&&this._movingAnchorName.indexOf("top")>=0){let g=s.point({x:0,y:-this.padding()*2});if(t.x+=g.x,t.y+=g.y,this._movingAnchorName=this._movingAnchorName.replace("top","bottom"),this._anchorDragOffset.x-=g.x,this._anchorDragOffset.y-=g.y,t.height+=this.padding()*2,!a){this.update();return}}else if(this._movingAnchorName&&t.height<0&&this._movingAnchorName.indexOf("bottom")>=0){let g=s.point({x:0,y:this.padding()*2});if(this._movingAnchorName=this._movingAnchorName.replace("bottom","top"),this._anchorDragOffset.x-=g.x,this._anchorDragOffset.y-=g.y,t.height+=this.padding()*2,!a){this.update();return}}if(this.boundBoxFunc()){let g=this.boundBoxFunc()(r,t);g?t=g:m.warn("boundBoxFunc returned falsy. You should return new bound rect from it!")}let o=1e7,h=new j;h.translate(r.x,r.y),h.rotate(r.rotation),h.scale(r.width/o,r.height/o);let l=new j;l.translate(t.x,t.y),l.rotate(t.rotation),l.scale(t.width/o,t.height/o);let d=l.multiply(h.invert());this._nodes.forEach(g=>{var c;let p=g.getParent().getAbsoluteTransform(),u=g.getTransform().copy();u.translate(g.offsetX(),g.offsetY());let _=new j;_.multiply(p.copy().invert()).multiply(d).multiply(p).multiply(u);let v=_.decompose();g.setAttrs(v),this._fire("transform",{evt:e,target:g}),g._fire("transform",{evt:e,target:g}),(c=g.getLayer())===null||c===void 0||c.batchDraw()}),this.rotation(m._getRotation(t.rotation)),this._resetTransformCache(),this.update(),this.getLayer().batchDraw()}forceUpdate(){this._resetTransformCache(),this.update()}_batchChangeChild(t,e){this.findOne(t).setAttrs(e)}update(){var t,e=this._getNodeRect();this.rotation(m._getRotation(e.rotation));var r=e.width,i=e.height,a=this.enabledAnchors(),s=this.resizeEnabled(),o=this.padding(),h=this.anchorSize();this.find("._anchor").forEach(l=>{l.setAttrs({width:h,height:h,offsetX:h/2,offsetY:h/2,stroke:this.anchorStroke(),strokeWidth:this.anchorStrokeWidth(),fill:this.anchorFill(),cornerRadius:this.anchorCornerRadius()})}),this._batchChangeChild(".top-left",{x:0,y:0,offsetX:h/2+o,offsetY:h/2+o,visible:s&&a.indexOf("top-left")>=0}),this._batchChangeChild(".top-center",{x:r/2,y:0,offsetY:h/2+o,visible:s&&a.indexOf("top-center")>=0}),this._batchChangeChild(".top-right",{x:r,y:0,offsetX:h/2-o,offsetY:h/2+o,visible:s&&a.indexOf("top-right")>=0}),this._batchChangeChild(".middle-left",{x:0,y:i/2,offsetX:h/2+o,visible:s&&a.indexOf("middle-left")>=0}),this._batchChangeChild(".middle-right",{x:r,y:i/2,offsetX:h/2-o,visible:s&&a.indexOf("middle-right")>=0}),this._batchChangeChild(".bottom-left",{x:0,y:i,offsetX:h/2+o,offsetY:h/2-o,visible:s&&a.indexOf("bottom-left")>=0}),this._batchChangeChild(".bottom-center",{x:r/2,y:i,offsetY:h/2-o,visible:s&&a.indexOf("bottom-center")>=0}),this._batchChangeChild(".bottom-right",{x:r,y:i,offsetX:h/2-o,offsetY:h/2-o,visible:s&&a.indexOf("bottom-right")>=0}),this._batchChangeChild(".rotater",{x:r/2,y:-this.rotateAnchorOffset()*m._sign(i)-o,visible:this.rotateEnabled()}),this._batchChangeChild(".back",{width:r,height:i,visible:this.borderEnabled(),stroke:this.borderStroke(),strokeWidth:this.borderStrokeWidth(),dash:this.borderDash(),x:0,y:0}),(t=this.getLayer())===null||t===void 0||t.batchDraw()}isTransforming(){return this._transforming}stopTransform(){if(this._transforming){this._removeEvents();var t=this.findOne("."+this._movingAnchorName);t&&t.stopDrag()}}destroy(){return this.getStage()&&this._cursorChange&&this.getStage().content&&(this.getStage().content.style.cursor=""),dt.prototype.destroy.call(this),this.detach(),this._removeEvents(),this}toObject(){return b.prototype.toObject.call(this)}getClientRect(){return{x:0,y:0,width:0,height:0}}};function Ra(n){return n instanceof Array||m.warn("enabledAnchors value should be an array"),n instanceof Array&&n.forEach(function(t){ve.indexOf(t)===-1&&m.warn("Unknown anchor name: "+t+". Available names are: "+ve.join(", "))}),n||[]}H.prototype.className="Transformer";N(H);f.addGetterSetter(H,"enabledAnchors",ve,Ra);f.addGetterSetter(H,"flipEnabled",!0,J());f.addGetterSetter(H,"resizeEnabled",!0);f.addGetterSetter(H,"anchorSize",10,S());f.addGetterSetter(H,"rotateEnabled",!0);f.addGetterSetter(H,"rotationSnaps",[]);f.addGetterSetter(H,"rotateAnchorOffset",50,S());f.addGetterSetter(H,"rotationSnapTolerance",5,S());f.addGetterSetter(H,"borderEnabled",!0);f.addGetterSetter(H,"anchorStroke","rgb(0, 161, 255)");f.addGetterSetter(H,"anchorStrokeWidth",1,S());f.addGetterSetter(H,"anchorFill","white");f.addGetterSetter(H,"anchorCornerRadius",0,S());f.addGetterSetter(H,"borderStroke","rgb(0, 161, 255)");f.addGetterSetter(H,"borderStrokeWidth",1,S());f.addGetterSetter(H,"borderDash");f.addGetterSetter(H,"keepRatio",!0);f.addGetterSetter(H,"centeredScaling",!1);f.addGetterSetter(H,"ignoreStroke",!1);f.addGetterSetter(H,"padding",0,S());f.addGetterSetter(H,"node");f.addGetterSetter(H,"nodes");f.addGetterSetter(H,"boundBoxFunc");f.addGetterSetter(H,"anchorDragBoundFunc");f.addGetterSetter(H,"shouldOverdrawWholeArea",!1);f.addGetterSetter(H,"useSingleNodeRotation",!0);f.backCompat(H,{lineEnabled:"borderEnabled",rotateHandlerOffset:"rotateAnchorOffset",enabledHandlers:"enabledAnchors"});var st=class extends y{_sceneFunc(t){t.beginPath(),t.arc(0,0,this.radius(),0,E.getAngle(this.angle()),this.clockwise()),t.lineTo(0,0),t.closePath(),t.fillStrokeShape(this)}getWidth(){return this.radius()*2}getHeight(){return this.radius()*2}setWidth(t){this.radius(t/2)}setHeight(t){this.radius(t/2)}};st.prototype.className="Wedge";st.prototype._centroid=!0;st.prototype._attrsAffectingSize=["radius"];N(st);f.addGetterSetter(st,"radius",0,S());f.addGetterSetter(st,"angle",0,S());f.addGetterSetter(st,"clockwise",!1);f.backCompat(st,{angleDeg:"angle",getAngleDeg:"getAngle",setAngleDeg:"setAngle"});function Nr(){this.r=0,this.g=0,this.b=0,this.a=0,this.next=null}var Ga=[512,512,456,512,328,456,335,512,405,328,271,456,388,335,292,512,454,405,364,328,298,271,496,456,420,388,360,335,312,292,273,512,482,454,428,405,383,364,345,328,312,298,284,271,259,496,475,456,437,420,404,388,374,360,347,335,323,312,302,292,282,273,265,512,497,482,468,454,441,428,417,405,394,383,373,364,354,345,337,328,320,312,305,298,291,284,278,271,265,259,507,496,485,475,465,456,446,437,428,420,412,404,396,388,381,374,367,360,354,347,341,335,329,323,318,312,307,302,297,292,287,282,278,273,269,265,261,512,505,497,489,482,475,468,461,454,447,441,435,428,422,417,411,405,399,394,389,383,378,373,368,364,359,354,350,345,341,337,332,328,324,320,316,312,309,305,301,298,294,291,287,284,281,278,274,271,268,265,262,259,257,507,501,496,491,485,480,475,470,465,460,456,451,446,442,437,433,428,424,420,416,412,408,404,400,396,392,388,385,381,377,374,370,367,363,360,357,354,350,347,344,341,338,335,332,329,326,323,320,318,315,312,310,307,304,302,299,297,294,292,289,287,285,282,280,278,275,273,271,269,267,265,263,261,259],Oa=[9,11,12,13,13,14,14,15,15,15,15,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24];function La(n,t){var e=n.data,r=n.width,i=n.height,a,s,o,h,l,d,g,c,p,u,_,v,w,x,C,P,A,k,R,T,G,O,M,D,L=t+t+1,Y=r-1,$=i-1,z=t+1,K=z*(z+1)/2,tt=new Nr,ot=null,F=tt,X=null,et=null,bt=Ga[t],Ct=Oa[t];for(o=1;o<L;o++)F=F.next=new Nr,o===z&&(ot=F);for(F.next=tt,g=d=0,s=0;s<i;s++){for(P=A=k=R=c=p=u=_=0,v=z*(T=e[d]),w=z*(G=e[d+1]),x=z*(O=e[d+2]),C=z*(M=e[d+3]),c+=K*T,p+=K*G,u+=K*O,_+=K*M,F=tt,o=0;o<z;o++)F.r=T,F.g=G,F.b=O,F.a=M,F=F.next;for(o=1;o<z;o++)h=d+((Y<o?Y:o)<<2),c+=(F.r=T=e[h])*(D=z-o),p+=(F.g=G=e[h+1])*D,u+=(F.b=O=e[h+2])*D,_+=(F.a=M=e[h+3])*D,P+=T,A+=G,k+=O,R+=M,F=F.next;for(X=tt,et=ot,a=0;a<r;a++)e[d+3]=M=_*bt>>Ct,M!==0?(M=255/M,e[d]=(c*bt>>Ct)*M,e[d+1]=(p*bt>>Ct)*M,e[d+2]=(u*bt>>Ct)*M):e[d]=e[d+1]=e[d+2]=0,c-=v,p-=w,u-=x,_-=C,v-=X.r,w-=X.g,x-=X.b,C-=X.a,h=g+((h=a+t+1)<Y?h:Y)<<2,P+=X.r=e[h],A+=X.g=e[h+1],k+=X.b=e[h+2],R+=X.a=e[h+3],c+=P,p+=A,u+=k,_+=R,X=X.next,v+=T=et.r,w+=G=et.g,x+=O=et.b,C+=M=et.a,P-=T,A-=G,k-=O,R-=M,et=et.next,d+=4;g+=r}for(a=0;a<r;a++){for(A=k=R=P=p=u=_=c=0,d=a<<2,v=z*(T=e[d]),w=z*(G=e[d+1]),x=z*(O=e[d+2]),C=z*(M=e[d+3]),c+=K*T,p+=K*G,u+=K*O,_+=K*M,F=tt,o=0;o<z;o++)F.r=T,F.g=G,F.b=O,F.a=M,F=F.next;for(l=r,o=1;o<=t;o++)d=l+a<<2,c+=(F.r=T=e[d])*(D=z-o),p+=(F.g=G=e[d+1])*D,u+=(F.b=O=e[d+2])*D,_+=(F.a=M=e[d+3])*D,P+=T,A+=G,k+=O,R+=M,F=F.next,o<$&&(l+=r);for(d=a,X=tt,et=ot,s=0;s<i;s++)h=d<<2,e[h+3]=M=_*bt>>Ct,M>0?(M=255/M,e[h]=(c*bt>>Ct)*M,e[h+1]=(p*bt>>Ct)*M,e[h+2]=(u*bt>>Ct)*M):e[h]=e[h+1]=e[h+2]=0,c-=v,p-=w,u-=x,_-=C,v-=X.r,w-=X.g,x-=X.b,C-=X.a,h=a+((h=s+z)<$?h:$)*r<<2,c+=P+=X.r=e[h],p+=A+=X.g=e[h+1],u+=k+=X.b=e[h+2],_+=R+=X.a=e[h+3],X=X.next,v+=T=et.r,w+=G=et.g,x+=O=et.b,C+=M=et.a,P-=T,A-=G,k-=O,R-=M,et=et.next,d+=r}}var Dr=function(t){var e=Math.round(this.blurRadius());e>0&&La(t,e)};f.addGetterSetter(b,"blurRadius",0,S(),f.afterSetFilter);var Ir=function(n){var t=this.brightness()*255,e=n.data,r=e.length,i;for(i=0;i<r;i+=4)e[i]+=t,e[i+1]+=t,e[i+2]+=t};f.addGetterSetter(b,"brightness",0,S(),f.afterSetFilter);var Fr=function(n){var t=Math.pow((this.contrast()+100)/100,2),e=n.data,r=e.length,i=150,a=150,s=150,o;for(o=0;o<r;o+=4)i=e[o],a=e[o+1],s=e[o+2],i/=255,i-=.5,i*=t,i+=.5,i*=255,a/=255,a-=.5,a*=t,a+=.5,a*=255,s/=255,s-=.5,s*=t,s+=.5,s*=255,i=i<0?0:i>255?255:i,a=a<0?0:a>255?255:a,s=s<0?0:s>255?255:s,e[o]=i,e[o+1]=a,e[o+2]=s};f.addGetterSetter(b,"contrast",0,S(),f.afterSetFilter);var Br=function(n){var t=this.embossStrength()*10,e=this.embossWhiteLevel()*255,r=this.embossDirection(),i=this.embossBlend(),a=0,s=0,o=n.data,h=n.width,l=n.height,d=h*4,g=l;switch(r){case"top-left":a=-1,s=-1;break;case"top":a=-1,s=0;break;case"top-right":a=-1,s=1;break;case"right":a=0,s=1;break;case"bottom-right":a=1,s=1;break;case"bottom":a=1,s=0;break;case"bottom-left":a=1,s=-1;break;case"left":a=0,s=-1;break;default:m.error("Unknown emboss direction: "+r)}do{var c=(g-1)*d,p=a;g+p<1&&(p=0),g+p>l&&(p=0);var u=(g-1+p)*h*4,_=h;do{var v=c+(_-1)*4,w=s;_+w<1&&(w=0),_+w>h&&(w=0);var x=u+(_-1+w)*4,C=o[v]-o[x],P=o[v+1]-o[x+1],A=o[v+2]-o[x+2],k=C,R=k>0?k:-k,T=P>0?P:-P,G=A>0?A:-A;if(T>R&&(k=P),G>R&&(k=A),k*=t,i){var O=o[v]+k,M=o[v+1]+k,D=o[v+2]+k;o[v]=O>255?255:O<0?0:O,o[v+1]=M>255?255:M<0?0:M,o[v+2]=D>255?255:D<0?0:D}else{var L=e-k;L<0?L=0:L>255&&(L=255),o[v]=o[v+1]=o[v+2]=L}}while(--_)}while(--g)};f.addGetterSetter(b,"embossStrength",.5,S(),f.afterSetFilter);f.addGetterSetter(b,"embossWhiteLevel",.5,S(),f.afterSetFilter);f.addGetterSetter(b,"embossDirection","top-left",null,f.afterSetFilter);f.addGetterSetter(b,"embossBlend",!1,null,f.afterSetFilter);function Be(n,t,e,r,i){var a=e-t,s=i-r,o;return a===0?r+s/2:s===0?r:(o=(n-t)/a,o=s*o+r,o)}var Hr=function(n){var t=n.data,e=t.length,r=t[0],i=r,a,s=t[1],o=s,h,l=t[2],d=l,g,c,p=this.enhance();if(p!==0){for(c=0;c<e;c+=4)a=t[c+0],a<r?r=a:a>i&&(i=a),h=t[c+1],h<s?s=h:h>o&&(o=h),g=t[c+2],g<l?l=g:g>d&&(d=g);i===r&&(i=255,r=0),o===s&&(o=255,s=0),d===l&&(d=255,l=0);var u,_,v,w,x,C,P,A,k;for(p>0?(_=i+p*(255-i),v=r-p*(r-0),x=o+p*(255-o),C=s-p*(s-0),A=d+p*(255-d),k=l-p*(l-0)):(u=(i+r)*.5,_=i+p*(i-u),v=r+p*(r-u),w=(o+s)*.5,x=o+p*(o-w),C=s+p*(s-w),P=(d+l)*.5,A=d+p*(d-P),k=l+p*(l-P)),c=0;c<e;c+=4)t[c+0]=Be(t[c+0],r,i,v,_),t[c+1]=Be(t[c+1],s,o,C,x),t[c+2]=Be(t[c+2],l,d,k,A)}};f.addGetterSetter(b,"enhance",0,S(),f.afterSetFilter);var zr=function(n){var t=n.data,e=t.length,r,i;for(r=0;r<e;r+=4)i=.34*t[r]+.5*t[r+1]+.16*t[r+2],t[r]=i,t[r+1]=i,t[r+2]=i};f.addGetterSetter(b,"hue",0,S(),f.afterSetFilter);f.addGetterSetter(b,"saturation",0,S(),f.afterSetFilter);f.addGetterSetter(b,"luminance",0,S(),f.afterSetFilter);var Wr=function(n){var t=n.data,e=t.length,r=1,i=Math.pow(2,this.saturation()),a=Math.abs(this.hue()+360)%360,s=this.luminance()*127,o,h=r*i*Math.cos(a*Math.PI/180),l=r*i*Math.sin(a*Math.PI/180),d=.299*r+.701*h+.167*l,g=.587*r-.587*h+.33*l,c=.114*r-.114*h-.497*l,p=.299*r-.299*h-.328*l,u=.587*r+.413*h+.035*l,_=.114*r-.114*h+.293*l,v=.299*r-.3*h+1.25*l,w=.587*r-.586*h-1.05*l,x=.114*r+.886*h-.2*l,C,P,A,k;for(o=0;o<e;o+=4)C=t[o+0],P=t[o+1],A=t[o+2],k=t[o+3],t[o+0]=d*C+g*P+c*A+s,t[o+1]=p*C+u*P+_*A+s,t[o+2]=v*C+w*P+x*A+s,t[o+3]=k};var Ur=function(n){var t=n.data,e=t.length,r=Math.pow(2,this.value()),i=Math.pow(2,this.saturation()),a=Math.abs(this.hue()+360)%360,s,o=r*i*Math.cos(a*Math.PI/180),h=r*i*Math.sin(a*Math.PI/180),l=.299*r+.701*o+.167*h,d=.587*r-.587*o+.33*h,g=.114*r-.114*o-.497*h,c=.299*r-.299*o-.328*h,p=.587*r+.413*o+.035*h,u=.114*r-.114*o+.293*h,_=.299*r-.3*o+1.25*h,v=.587*r-.586*o-1.05*h,w=.114*r+.886*o-.2*h,x,C,P,A;for(s=0;s<e;s+=4)x=t[s+0],C=t[s+1],P=t[s+2],A=t[s+3],t[s+0]=l*x+d*C+g*P,t[s+1]=c*x+p*C+u*P,t[s+2]=_*x+v*C+w*P,t[s+3]=A};f.addGetterSetter(b,"hue",0,S(),f.afterSetFilter);f.addGetterSetter(b,"saturation",0,S(),f.afterSetFilter);f.addGetterSetter(b,"value",0,S(),f.afterSetFilter);var Yr=function(n){var t=n.data,e=t.length,r;for(r=0;r<e;r+=4)t[r]=255-t[r],t[r+1]=255-t[r+1],t[r+2]=255-t[r+2]};var Na=function(n,t,e){var r=n.data,i=t.data,a=n.width,s=n.height,o=e.polarCenterX||a/2,h=e.polarCenterY||s/2,l,d,g,c=0,p=0,u=0,_=0,v,w=Math.sqrt(o*o+h*h);d=a-o,g=s-h,v=Math.sqrt(d*d+g*g),w=v>w?v:w;var x=s,C=a,P,A,k=360/C*Math.PI/180,R,T;for(A=0;A<C;A+=1)for(R=Math.sin(A*k),T=Math.cos(A*k),P=0;P<x;P+=1)d=Math.floor(o+w*P/x*T),g=Math.floor(h+w*P/x*R),l=(g*a+d)*4,c=r[l+0],p=r[l+1],u=r[l+2],_=r[l+3],l=(A+P*a)*4,i[l+0]=c,i[l+1]=p,i[l+2]=u,i[l+3]=_},Da=function(n,t,e){var r=n.data,i=t.data,a=n.width,s=n.height,o=e.polarCenterX||a/2,h=e.polarCenterY||s/2,l,d,g,c,p,u=0,_=0,v=0,w=0,x,C=Math.sqrt(o*o+h*h);d=a-o,g=s-h,x=Math.sqrt(d*d+g*g),C=x>C?x:C;var P=s,A=a,k,R,T=e.polarRotation||0,G,O;for(d=0;d<a;d+=1)for(g=0;g<s;g+=1)c=d-o,p=g-h,k=Math.sqrt(c*c+p*p)*P/C,R=(Math.atan2(p,c)*180/Math.PI+360+T)%360,R=R*A/360,G=Math.floor(R),O=Math.floor(k),l=(O*a+G)*4,u=r[l+0],_=r[l+1],v=r[l+2],w=r[l+3],l=(g*a+d)*4,i[l+0]=u,i[l+1]=_,i[l+2]=v,i[l+3]=w},Vr=function(n){var t=n.width,e=n.height,r,i,a,s,o,h,l,d,g,c,p=Math.round(this.kaleidoscopePower()),u=Math.round(this.kaleidoscopeAngle()),_=Math.floor(t*(u%360)/360);if(!(p<1)){var v=m.createCanvasElement();v.width=t,v.height=e;var w=v.getContext("2d").getImageData(0,0,t,e);Na(n,w,{polarCenterX:t/2,polarCenterY:e/2});for(var x=t/Math.pow(2,p);x<=8;)x=x*2,p-=1;x=Math.ceil(x);var C=x,P=0,A=C,k=1;for(_+x>t&&(P=C,A=0,k=-1),i=0;i<e;i+=1)for(r=P;r!==A;r+=k)a=Math.round(r+_)%t,g=(t*i+a)*4,o=w.data[g+0],h=w.data[g+1],l=w.data[g+2],d=w.data[g+3],c=(t*i+r)*4,w.data[c+0]=o,w.data[c+1]=h,w.data[c+2]=l,w.data[c+3]=d;for(i=0;i<e;i+=1)for(C=Math.floor(x),s=0;s<p;s+=1){for(r=0;r<C+1;r+=1)g=(t*i+r)*4,o=w.data[g+0],h=w.data[g+1],l=w.data[g+2],d=w.data[g+3],c=(t*i+C*2-r-1)*4,w.data[c+0]=o,w.data[c+1]=h,w.data[c+2]=l,w.data[c+3]=d;C*=2}Da(w,n,{polarRotation:0})}};f.addGetterSetter(b,"kaleidoscopePower",2,S(),f.afterSetFilter);f.addGetterSetter(b,"kaleidoscopeAngle",0,S(),f.afterSetFilter);function _e(n,t,e){var r=(e*n.width+t)*4,i=[];return i.push(n.data[r++],n.data[r++],n.data[r++],n.data[r++]),i}function Kt(n,t){return Math.sqrt(Math.pow(n[0]-t[0],2)+Math.pow(n[1]-t[1],2)+Math.pow(n[2]-t[2],2))}function Ia(n){for(var t=[0,0,0],e=0;e<n.length;e++)t[0]+=n[e][0],t[1]+=n[e][1],t[2]+=n[e][2];return t[0]/=n.length,t[1]/=n.length,t[2]/=n.length,t}function Fa(n,t){var e=_e(n,0,0),r=_e(n,n.width-1,0),i=_e(n,0,n.height-1),a=_e(n,n.width-1,n.height-1),s=t||10;if(Kt(e,r)<s&&Kt(r,a)<s&&Kt(a,i)<s&&Kt(i,e)<s){for(var o=Ia([r,e,a,i]),h=[],l=0;l<n.width*n.height;l++){var d=Kt(o,[n.data[l*4],n.data[l*4+1],n.data[l*4+2]]);h[l]=d<s?0:255}return h}}function Ba(n,t){for(var e=0;e<n.width*n.height;e++)n.data[4*e+3]=t[e]}function Ha(n,t,e){for(var r=[1,1,1,1,0,1,1,1,1],i=Math.round(Math.sqrt(r.length)),a=Math.floor(i/2),s=[],o=0;o<e;o++)for(var h=0;h<t;h++){for(var l=o*t+h,d=0,g=0;g<i;g++)for(var c=0;c<i;c++){var p=o+g-a,u=h+c-a;if(p>=0&&p<e&&u>=0&&u<t){var _=p*t+u,v=r[g*i+c];d+=n[_]*v}}s[l]=d===255*8?255:0}return s}function za(n,t,e){for(var r=[1,1,1,1,1,1,1,1,1],i=Math.round(Math.sqrt(r.length)),a=Math.floor(i/2),s=[],o=0;o<e;o++)for(var h=0;h<t;h++){for(var l=o*t+h,d=0,g=0;g<i;g++)for(var c=0;c<i;c++){var p=o+g-a,u=h+c-a;if(p>=0&&p<e&&u>=0&&u<t){var _=p*t+u,v=r[g*i+c];d+=n[_]*v}}s[l]=d>=255*4?255:0}return s}function Wa(n,t,e){for(var r=[.1111111111111111,.1111111111111111,.1111111111111111,.1111111111111111,.1111111111111111,.1111111111111111,.1111111111111111,.1111111111111111,.1111111111111111],i=Math.round(Math.sqrt(r.length)),a=Math.floor(i/2),s=[],o=0;o<e;o++)for(var h=0;h<t;h++){for(var l=o*t+h,d=0,g=0;g<i;g++)for(var c=0;c<i;c++){var p=o+g-a,u=h+c-a;if(p>=0&&p<e&&u>=0&&u<t){var _=p*t+u,v=r[g*i+c];d+=n[_]*v}}s[l]=d}return s}var Xr=function(n){var t=this.threshold(),e=Fa(n,t);return e&&(e=Ha(e,n.width,n.height),e=za(e,n.width,n.height),e=Wa(e,n.width,n.height),Ba(n,e)),n};f.addGetterSetter(b,"threshold",0,S(),f.afterSetFilter);var qr=function(n){var t=this.noise()*255,e=n.data,r=e.length,i=t/2,a;for(a=0;a<r;a+=4)e[a+0]+=i-2*i*Math.random(),e[a+1]+=i-2*i*Math.random(),e[a+2]+=i-2*i*Math.random()};f.addGetterSetter(b,"noise",.2,S(),f.afterSetFilter);var Kr=function(n){var t=Math.ceil(this.pixelSize()),e=n.width,r=n.height,i,a,s,o,h,l,d,g=Math.ceil(e/t),c=Math.ceil(r/t),p,u,_,v,w,x,C,P=n.data;if(t<=0){m.error("pixelSize value can not be <= 0");return}for(w=0;w<g;w+=1)for(x=0;x<c;x+=1){for(o=0,h=0,l=0,d=0,p=w*t,u=p+t,_=x*t,v=_+t,C=0,i=p;i<u;i+=1)if(!(i>=e))for(a=_;a<v;a+=1)a>=r||(s=(e*a+i)*4,o+=P[s+0],h+=P[s+1],l+=P[s+2],d+=P[s+3],C+=1);for(o=o/C,h=h/C,l=l/C,d=d/C,i=p;i<u;i+=1)if(!(i>=e))for(a=_;a<v;a+=1)a>=r||(s=(e*a+i)*4,P[s+0]=o,P[s+1]=h,P[s+2]=l,P[s+3]=d)}};f.addGetterSetter(b,"pixelSize",8,S(),f.afterSetFilter);var jr=function(n){var t=Math.round(this.levels()*254)+1,e=n.data,r=e.length,i=255/t,a;for(a=0;a<r;a+=1)e[a]=Math.floor(e[a]/i)*i};f.addGetterSetter(b,"levels",.5,S(),f.afterSetFilter);var Qr=function(n){var t=n.data,e=t.length,r=this.red(),i=this.green(),a=this.blue(),s,o;for(s=0;s<e;s+=4)o=(.34*t[s]+.5*t[s+1]+.16*t[s+2])/255,t[s]=o*r,t[s+1]=o*i,t[s+2]=o*a,t[s+3]=t[s+3]};f.addGetterSetter(b,"red",0,function(n){return this._filterUpToDate=!1,n>255?255:n<0?0:Math.round(n)});f.addGetterSetter(b,"green",0,function(n){return this._filterUpToDate=!1,n>255?255:n<0?0:Math.round(n)});f.addGetterSetter(b,"blue",0,Jt,f.afterSetFilter);var Jr=function(n){var t=n.data,e=t.length,r=this.red(),i=this.green(),a=this.blue(),s=this.alpha(),o,h;for(o=0;o<e;o+=4)h=1-s,t[o]=r*s+t[o]*h,t[o+1]=i*s+t[o+1]*h,t[o+2]=a*s+t[o+2]*h};f.addGetterSetter(b,"red",0,function(n){return this._filterUpToDate=!1,n>255?255:n<0?0:Math.round(n)});f.addGetterSetter(b,"green",0,function(n){return this._filterUpToDate=!1,n>255?255:n<0?0:Math.round(n)});f.addGetterSetter(b,"blue",0,Jt,f.afterSetFilter);f.addGetterSetter(b,"alpha",1,function(n){return this._filterUpToDate=!1,n>1?1:n<0?0:n});var Zr=function(n){var t=n.data,e=t.length,r,i,a,s;for(r=0;r<e;r+=4)i=t[r+0],a=t[r+1],s=t[r+2],t[r+0]=Math.min(255,i*.393+a*.769+s*.189),t[r+1]=Math.min(255,i*.349+a*.686+s*.168),t[r+2]=Math.min(255,i*.272+a*.534+s*.131)};var $r=function(n){var t=n.data,e=n.width,r=n.height,i=e*4,a=r;do{var s=(a-1)*i,o=e;do{var h=s+(o-1)*4,l=t[h],d=t[h+1],g=t[h+2];l>127&&(l=255-l),d>127&&(d=255-d),g>127&&(g=255-g),t[h]=l,t[h+1]=d,t[h+2]=g}while(--o)}while(--a)};var ti=function(n){var t=this.threshold()*255,e=n.data,r=e.length,i;for(i=0;i<r;i+=1)e[i]=e[i]<t?0:255};f.addGetterSetter(b,"threshold",.5,S(),f.afterSetFilter);var ei=Me.Util._assign(Me,{Arc:nt,Arrow:ct,Circle:St,Ellipse:ft,Image:rt,Label:Dt,Tag:gt,Line:it,Path:B,Rect:yt,RegularPolygon:pt,Ring:mt,Sprite:at,Star:ut,Text:U,TextPath:q,Transformer:H,Wedge:st,Filters:{Blur:Dr,Brighten:Ir,Contrast:Fr,Emboss:Br,Enhance:Hr,Grayscale:zr,HSL:Wr,HSV:Ur,Invert:Yr,Kaleidoscope:Vr,Mask:Xr,Noise:qr,Pixelate:Kr,Posterize:jr,RGB:Qr,RGBA:Jr,Sepia:Zr,Solarize:$r,Threshold:ti}});var jt=ei;window.addEventListener("load",()=>{let n=window.innerWidth,t=window.innerHeight,e=new jt.Stage({container:"canvas-container",width:n,height:t}),r=new jt.Layer,i=new jt.Circle({x:10,y:10,radius:5,fill:"red",stroke:"black",strokeWidth:1});r.add(i),e.add(r);let a=100,s=2e3,o=e.width()/2;new jt.Animation(function(l){l!==void 0&&i.x(l.time*.01)},r).start()});})();
//# sourceMappingURL=data:application/json;base64,
